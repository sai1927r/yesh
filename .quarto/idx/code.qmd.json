{"title":"code","markdown":{"yaml":{"title":"code"},"headingText":"If there are missing values, impute them using mean imputation","containsRefs":false,"markdown":"\n\n```{r}\ndata = read.csv(\"C:/Users/HP/Downloads/cirrhosis+patient+survival+prediction+dataset-1/cirrhosis.csv\")\nhead(data)\nstr(data)\n\nmissing_values <- colSums(is.na(data))\nprint(missing_values)\n\ndata_imputed <- na.omit(data)\n\nhead(data_imputed)\n\ncirrhosis_data <- na.omit(data_imputed)\nhead(cirrhosis_data)\n# Load necessary libraries\nlibrary(dplyr)  # For data manipulation\nlibrary(ggplot2)  # For data visualization\nlibrary(caret)  # For machine learning model fitting\nlibrary(survival) # For survival analysis\nlibrary(anomalize)\nlibrary(mvoutlier)\n\n\n\n#predata analysis.\n\n\n\n\n# 1. Exploratory Data Analysis for each feature variable\n\n\n# Drug\nggplot(data_imputed, aes(x = Drug)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Drug\", y = \"Count\", title = \"Distribution of Drug\")\n\n# Age\nggplot(data_imputed, aes(x = Age)) +\n  geom_histogram(binwidth = 1000, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Age\", y = \"Frequency\", title = \"Distribution of Age\")\n\n# Sex\nggplot(data_imputed, aes(x = Sex)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Sex\", y = \"Count\", title = \"Distribution of Sex\")\n\n# Ascites\nggplot(data_imputed, aes(x = Ascites)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Ascites\", y = \"Count\", title = \"Distribution of Ascites\")\n\n# Hepatomegaly\nggplot(data_imputed, aes(x = Hepatomegaly)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Hepatomegaly\", y = \"Count\", title = \"Distribution of Hepatomegaly\")\n\n# Spiders\nggplot(data_imputed, aes(x = Spiders)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Spiders\", y = \"Count\", title = \"Distribution of Spiders\")\n\n# Edema\nggplot(data_imputed, aes(x = Edema)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Edema\", y = \"Count\", title = \"Distribution of Edema\")\n\n# Bilirubin\nggplot(data_imputed, aes(x = Bilirubin)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Bilirubin\", y = \"Frequency\", title = \"Distribution of Bilirubin\")\n\n# Cholesterol\nggplot(data_imputed, aes(x = Cholesterol)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Cholesterol\", y = \"Frequency\", title = \"Distribution of Cholesterol\")\n\n# Albumin\nggplot(data_imputed, aes(x = Albumin)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Albumin\", y = \"Frequency\", title = \"Distribution of Albumin\")\n\n# Copper\nggplot(data_imputed, aes(x = Copper)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Copper\", y = \"Frequency\", title = \"Distribution of Copper\")\n\n# Alk_Phos\nggplot(data_imputed, aes(x = Alk_Phos)) +\n  geom_histogram(binwidth = 500, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Alkaline Phosphatase\", y = \"Frequency\", title = \"Distribution of Alkaline Phosphatase\")\n\n# SGOT\nggplot(data_imputed, aes(x = SGOT)) +\n  geom_histogram(binwidth = 10, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"SGOT\", y = \"Frequency\", title = \"Distribution of SGOT\")\n\n# Triglycerides\nggplot(data_imputed, aes(x = Tryglicerides)) +\n  geom_histogram(binwidth = 10, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Triglycerides\", y = \"Frequency\", title = \"Distribution of Triglycerides\")\n\n# Platelets\nggplot(data_imputed, aes(x = Platelets)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Platelets\", y = \"Frequency\", title = \"Distribution of Platelets\")\n\n# Prothrombin\nggplot(data_imputed, aes(x = Prothrombin)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Prothrombin\", y = \"Frequency\", title = \"Distribution of Prothrombin\")\n\n# Stage\nggplot(data_imputed, aes(x = Stage)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Stage\", y = \"Count\", title = \"Distribution of Stage\")\n\n\n#This is to find which disease is more affecting the status target variable.\n\n\n# Create contingency tables for each disease-related feature and Status\ntable_ascites <- table(data_imputed$Ascites, data_imputed$Status)\ntable_hepatomegaly <- table(data_imputed$Hepatomegaly, data_imputed$Status)\ntable_spiders <- table(data_imputed$Spiders, data_imputed$Status)\ntable_edema <- table(data_imputed$Edema, data_imputed$Status)\n\n# Create contingency table for Status and each disease-related feature\ntable_status_ascites <- table(data_imputed$Status, data_imputed$Ascites)\ntable_status_hepatomegaly <- table(data_imputed$Status, data_imputed$Hepatomegaly)\ntable_status_spiders <- table(data_imputed$Status, data_imputed$Spiders)\ntable_status_edema <- table(data_imputed$Status, data_imputed$Edema)\n\n# Visualize the relationship using stacked bar charts\npar(mfrow = c(2, 2))  # Set up a 2x2 layout for plots\nbarplot(table_ascites, beside = TRUE, legend = TRUE, main = \"Ascites vs. Status\")\nbarplot(table_hepatomegaly, beside = TRUE, legend = TRUE, main = \"Hepatomegaly vs. Status\")\nbarplot(table_spiders, beside = TRUE, legend = TRUE, main = \"Spiders vs. Status\")\nbarplot(table_edema, beside = TRUE, legend = TRUE, main = \"Edema vs. Status\")\n\n# Conduct chi-square tests for independence\nchi_sq_ascites <- chisq.test(table_ascites)\nchi_sq_hepatomegaly <- chisq.test(table_hepatomegaly)\nchi_sq_spiders <- chisq.test(table_spiders)\nchi_sq_edema <- chisq.test(table_edema)\n\n# Conduct chi-square tests for independence with Status and each disease-related feature\nchi_sq_status_ascites <- chisq.test(table_status_ascites)\nchi_sq_status_hepatomegaly <- chisq.test(table_status_hepatomegaly)\nchi_sq_status_spiders <- chisq.test(table_status_spiders)\nchi_sq_status_edema <- chisq.test(table_status_edema)\n\n# Print the results of chi-square tests\nprint(\"Chi-square test results for Ascites vs. Status:\")\nprint(chi_sq_ascites)\nprint(\"Chi-square test results for Hepatomegaly vs. Status:\")\nprint(chi_sq_hepatomegaly)\nprint(\"Chi-square test results for Spiders vs. Status:\")\nprint(chi_sq_spiders)\nprint(\"Chi-square test results for Edema vs. Status:\")\nprint(chi_sq_edema)\n\n# Print the results of chi-square tests for Status and each disease-related feature\nprint(\"Chi-square test results for Status vs. Ascites:\")\nprint(chi_sq_status_ascites)\nprint(\"Chi-square test results for Status vs. Hepatomegaly:\")\nprint(chi_sq_status_hepatomegaly)\nprint(\"Chi-square test results for Status vs. Spiders:\")\nprint(chi_sq_status_spiders)\nprint(\"Chi-square test results for Status vs. Edema:\")\nprint(chi_sq_status_edema)\n\n\n#Overall, Ascites, Hepatomegaly, and Edema seem to have a significant impact on the disease outcome,\n#based on their lower p-values compared to Spiders.\n#Among these, Ascites and Hepatomegaly might have slightly stronger associations with the disease outcome, given their lower p-values.\n\n# Define thresholds for abnormal values based on general reference ranges\nthresholds <- list(\n  Bilirubin = c(0.3, 1.2),              # Normal total bilirubin levels (mg/dL)\n  Cholesterol = c(0, 200),               # Normal total cholesterol levels (mg/dL)\n  Albumin = c(3.5, 5.0),                 # Normal serum albumin levels (g/dL)\n  Copper = c(70, 140),                   # Normal serum copper levels (Âµg/dL)\n  Alk_Phos = c(44, 147),                 # Normal alkaline phosphatase levels (IU/L)\n  SGOT = c(0, 40),                       # Normal serum glutamic-oxaloacetic transaminase levels (IU/L)\n  Tryglicerides = c(0, 150),             # Normal triglyceride levels (mg/dL)\n  Platelets = c(150, 450),         # Normal platelet counts (per microliter of blood)\n  Prothrombin = c(11, 13.5)              # Normal prothrombin time (seconds)\n)\n\n# Select the relevant lab value columns\nlab_columns <- cirrhosis_data %>%\n  select(Bilirubin, Cholesterol, Albumin, Copper, Alk_Phos, SGOT, Tryglicerides, Platelets, Prothrombin)\n\n# Ensure numeric lab values\nlab_columns <- lab_columns %>% mutate_all(as.numeric)\n\n# Identify rows without missing values\ncomplete_cases <- complete.cases(lab_columns)\n\n# Filter both the original and lab data based on complete rows\nlab_values <- lab_columns[complete_cases, ]\ncirrhosis_data_clean <- cirrhosis_data[complete_cases, ]\n\n# Apply k-means clustering\nset.seed(123)\nkmeans_clusters <- kmeans(scale(lab_values), centers = 3)  # Adjust the number of clusters as needed\ncirrhosis_data_clean$Cluster <- as.factor(kmeans_clusters$cluster)\n\n# Function to classify values based on thresholds\nclassify_abnormal <- function(value, range) {\n  if (is.na(value)) {\n    return(NA)\n  } else if (value < range[1] || value > range[2]) {\n    return(\"Abnormal\")\n  } else {\n    return(\"Normal\")\n  }\n}\n\n# Apply the function to classify each lab value based on the thresholds\nfor (param in names(thresholds)) {\n  cirrhosis_data_clean[[paste0(param, \"_Class\")]] <- mapply(classify_abnormal, cirrhosis_data_clean[[param]], MoreArgs = list(range = thresholds[[param]]))\n}\n\n# Calculate the proportion of abnormal lab values per cluster\nabnormal_props <- cirrhosis_data_clean %>%\n  group_by(Cluster) %>%\n  summarize(across(ends_with(\"_Class\"), ~ mean(. == \"Abnormal\", na.rm = TRUE)))\n\nprint(abnormal_props)\n\n# Survival Analysis\nlibrary(survival)\n\n# Create the survival object\nsurv_obj <- Surv(time = cirrhosis_data_clean$N_Days, event = ifelse(cirrhosis_data_clean$Status == \"D\", 1, 0))\n\n# Fit the survival model by clusters\nfit <- survfit(surv_obj ~ Cluster, data = cirrhosis_data_clean)\n\n# Plot Kaplan-Meier survival curves\nplot(fit, col = 1:3, lty = 1:3, xlab = \"Time (days)\", ylab = \"Survival Probability\")\nlegend(\"topright\", legend = levels(cirrhosis_data_clean$Cluster), col = 1:3, lty = 1:3)\n\n# Log-rank test to compare survival curves\nlog_rank_test <- survdiff(surv_obj ~ Cluster, data = cirrhosis_data_clean)\np_value <- 1 - pchisq(log_rank_test$chisq, length(log_rank_test$n) - 1)\ntitle(sub = paste(\"Log-rank p-value:\", round(p_value, 4)))\n\n# Calculate the midpoint of the threshold range for each variable\nthreshold_midpoints <- sapply(thresholds, function(x) mean(x))\n\n# Calculate the distance of each observation's value from the midpoint of the threshold range for each variable\ndistances <- sapply(names(thresholds), function(var) abs(cirrhosis_data_clean[[var]] - threshold_midpoints[var]))\n\n# Summarize the distance across all threshold variables for each observation\ntotal_distance <- rowSums(distances)\n\n# Define a threshold for defining \"heavily abnormal\" observations\nthreshold_distance <- 3  # Example threshold (can be adjusted based on your requirements)\n\n# Determine which variables are heavily abnormal for each observation\nheavily_abnormal_vars <- apply(distances, 1, function(x) names(thresholds)[x > threshold_distance])\n\n# Create a new column indicating observations where the summarized distance exceeds the defined threshold\ncirrhosis_data_clean$Heavily_Abnormal <- ifelse(total_distance > threshold_distance, paste0(\"(\", paste(heavily_abnormal_vars, collapse = \", \"), \")\"), \"\")\n\n# Print the first few rows of the updated dataset\nhead(data_imputed)\n\n#now we will decide the feature variables whether they are normal or abnormal with help of statistical analysis \n#visualization and references.\n\n# Calculate summary statistics\nsummary_stats <- summary(data_imputed[, c(\"Bilirubin\", \"Cholesterol\", \"Albumin\", \"Copper\", \"Alk_Phos\", \"SGOT\", \"Tryglicerides\", \"Platelets\", \"Prothrombin\")])\nprint(summary_stats)\n\n#measures such as mean, median, standard deviation, minimum, and maximum. This will give you an overview of the distribution of values and help identify potential outliers.\n\n\n# Visualize the distribution using boxplots\nboxplot(data[, c(\"Bilirubin\", \"Cholesterol\", \"Albumin\", \"Copper\", \"Alk_Phos\", \"SGOT\", \"Tryglicerides\", \"Platelets\", \"Prothrombin\")])\n\n#Look for any extreme values or unusual patterns in the data that may indicate abnormality.\n\n#Clinical Guidelines:\n#we'll need to consult clinical guidelines or literature for reference ranges. For example, for bilirubin, you might consider a range of 0.2-1.2 mg/dL as normal.\n#Expert Opinion:\n#Seek input from medical professionals or domain experts who can provide guidance on what values are considered abnormal in the context of liver cirrhosis.\n\n\n#research questions \n\n\n#1)Is there a significant interaction effect between drug treatment (D-penicillamine vs placebo) and ascites status (present vs absent) on survival time?\n\nlibrary(survival)\nlibrary(car)\nlibrary(ggplot2)\nlibrary(survminer)\n# Convert 'Status' to a binary indicator\ndata_imputed$Event <- ifelse(data_imputed$Status == \"D\", 1, 0)\n\n# Create survival object\nsurv_obj <- Surv(time = data_imputed$N_Days, event = data_imputed$Event)\n\n# Fit a Cox proportional hazards model with the new survival object\ncoxph_model <- coxph(surv_obj ~ Drug * Ascites, data = data_imputed)\n\ncoef(coxph_model)\n# Test the interaction effect\nAnova(coxph_model, type = \"III\")\n\n# Create a factor variable for the combination of Drug and Ascites\ndata_imputed$Drug_Ascites <- with(data_imputed, interaction(Drug, Ascites))\n\n# Plot Kaplan-Meier survival curves\nggsurvplot(\n  survfit(surv_obj ~ Drug_Ascites, data = data_imputed),\n  data = data_imputed,\n  risk.table = TRUE,\n  pval = TRUE,\n  conf.int = TRUE,\n  xlab = \"Time (days)\",\n  ggtheme = theme_bw()\n)\n\n#Drug: The likelihood ratio (LR) chi-square statistic is 0.0738 with 1 degree of freedom, resulting in a p-value of 0.7859. This indicates that the effect of the 'Drug' variable alone is not statistically significant.\n#Ascites: The LR chi-square statistic is 10.8940 with 1 degree of freedom, yielding a highly significant p-value of 0.0009647. This suggests that the presence of ascites significantly affects survival outcomes.\n#Drug:Ascites Interaction: The LR chi-square statistic is 0.0923 with 1 degree of freedom, leading to a p-value of 0.7613. This implies that there is no statistically significant interaction effect between 'Drug' and 'Ascites' on survival outcomes.\n#These results indicate that while ascites is a significant predictor of survival outcomes, neither the 'Drug' variable nor its interaction with ascites significantly affects survival outcomes in this analysis.\n\n\n#2)Do the distributions of lab values (bilirubin, albumin, etc.) differ significantly between patients with and without edema?\n\nlibrary(dplyr)\nlibrary(ggpubr)\n\n# Group patients by edema status\ncirrhosis_edema <- data_imputed %>% \n  mutate(Edema_Status = ifelse(Edema %in% c(\"Y\", \"S\"), \"Edema\", \"No Edema\"))\n\n# Perform one-way ANOVA or Kruskal-Wallis tests for each lab value\nggboxplot(cirrhosis_edema, x=\"Edema_Status\", y=\"Bilirubin\") + \n  stat_compare_means(method=\"anova\")\n\n\nkruskal.test(Albumin ~ Edema_Status, data=cirrhosis_edema)\n\n#3)Do the relationships between lab values (e.g. bilirubin vs albumin) differ significantly between treatment groups?\n\n# Load required libraries\nlibrary(randomForest)\nlibrary(caret)\n\n# Define your dataset and target variable\nX <- cirrhosis_data[, c(\"Bilirubin\", \"Albumin\")]\ny <- as.factor(cirrhosis_data$Drug)  # Convert Treatment to a factor for classification\n\n# Split data into training and testing sets\nset.seed(123)\ntrain_index <- createDataPartition(y, p = 0.8, list = FALSE)\nX_train <- X[train_index, ]\ny_train <- y[train_index]\nX_test <- X[-train_index, ]\ny_test <- y[-train_index]\n\n# Train separate Random Forest models for each treatment group\n# Train separate Random Forest models for each treatment group\ntreatment_levels <- levels(y)\nrf_models <- list()\nfor (treatment_level in treatment_levels) {\n  y_train_treatment <- ifelse(y_train == treatment_level, 1, 0)  # Convert treatment level to binary indicator\n  rf_models[[treatment_level]] <- randomForest(x = X_train, y = y_train_treatment, ntree = 100)\n}\n\nfeature_importance <- lapply(rf_models, importance)\n\n# Print feature importance for each treatment group\nfor (treatment_level in treatment_levels) {\n  cat(\"Treatment Group:\", treatment_level, \"\\n\")\n  print(feature_importance[[treatment_level]])\n  cat(\"\\n\")\n}\n\n\n```\n","srcMarkdownNoYaml":"\n\n```{r}\ndata = read.csv(\"C:/Users/HP/Downloads/cirrhosis+patient+survival+prediction+dataset-1/cirrhosis.csv\")\nhead(data)\nstr(data)\n\nmissing_values <- colSums(is.na(data))\nprint(missing_values)\n\n# If there are missing values, impute them using mean imputation\ndata_imputed <- na.omit(data)\n\nhead(data_imputed)\n\ncirrhosis_data <- na.omit(data_imputed)\nhead(cirrhosis_data)\n# Load necessary libraries\nlibrary(dplyr)  # For data manipulation\nlibrary(ggplot2)  # For data visualization\nlibrary(caret)  # For machine learning model fitting\nlibrary(survival) # For survival analysis\nlibrary(anomalize)\nlibrary(mvoutlier)\n\n\n\n#predata analysis.\n\n\n\n\n# 1. Exploratory Data Analysis for each feature variable\n\n\n# Drug\nggplot(data_imputed, aes(x = Drug)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Drug\", y = \"Count\", title = \"Distribution of Drug\")\n\n# Age\nggplot(data_imputed, aes(x = Age)) +\n  geom_histogram(binwidth = 1000, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Age\", y = \"Frequency\", title = \"Distribution of Age\")\n\n# Sex\nggplot(data_imputed, aes(x = Sex)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Sex\", y = \"Count\", title = \"Distribution of Sex\")\n\n# Ascites\nggplot(data_imputed, aes(x = Ascites)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Ascites\", y = \"Count\", title = \"Distribution of Ascites\")\n\n# Hepatomegaly\nggplot(data_imputed, aes(x = Hepatomegaly)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Hepatomegaly\", y = \"Count\", title = \"Distribution of Hepatomegaly\")\n\n# Spiders\nggplot(data_imputed, aes(x = Spiders)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Spiders\", y = \"Count\", title = \"Distribution of Spiders\")\n\n# Edema\nggplot(data_imputed, aes(x = Edema)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Edema\", y = \"Count\", title = \"Distribution of Edema\")\n\n# Bilirubin\nggplot(data_imputed, aes(x = Bilirubin)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Bilirubin\", y = \"Frequency\", title = \"Distribution of Bilirubin\")\n\n# Cholesterol\nggplot(data_imputed, aes(x = Cholesterol)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Cholesterol\", y = \"Frequency\", title = \"Distribution of Cholesterol\")\n\n# Albumin\nggplot(data_imputed, aes(x = Albumin)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Albumin\", y = \"Frequency\", title = \"Distribution of Albumin\")\n\n# Copper\nggplot(data_imputed, aes(x = Copper)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Copper\", y = \"Frequency\", title = \"Distribution of Copper\")\n\n# Alk_Phos\nggplot(data_imputed, aes(x = Alk_Phos)) +\n  geom_histogram(binwidth = 500, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Alkaline Phosphatase\", y = \"Frequency\", title = \"Distribution of Alkaline Phosphatase\")\n\n# SGOT\nggplot(data_imputed, aes(x = SGOT)) +\n  geom_histogram(binwidth = 10, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"SGOT\", y = \"Frequency\", title = \"Distribution of SGOT\")\n\n# Triglycerides\nggplot(data_imputed, aes(x = Tryglicerides)) +\n  geom_histogram(binwidth = 10, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Triglycerides\", y = \"Frequency\", title = \"Distribution of Triglycerides\")\n\n# Platelets\nggplot(data_imputed, aes(x = Platelets)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Platelets\", y = \"Frequency\", title = \"Distribution of Platelets\")\n\n# Prothrombin\nggplot(data_imputed, aes(x = Prothrombin)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Prothrombin\", y = \"Frequency\", title = \"Distribution of Prothrombin\")\n\n# Stage\nggplot(data_imputed, aes(x = Stage)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Stage\", y = \"Count\", title = \"Distribution of Stage\")\n\n\n#This is to find which disease is more affecting the status target variable.\n\n\n# Create contingency tables for each disease-related feature and Status\ntable_ascites <- table(data_imputed$Ascites, data_imputed$Status)\ntable_hepatomegaly <- table(data_imputed$Hepatomegaly, data_imputed$Status)\ntable_spiders <- table(data_imputed$Spiders, data_imputed$Status)\ntable_edema <- table(data_imputed$Edema, data_imputed$Status)\n\n# Create contingency table for Status and each disease-related feature\ntable_status_ascites <- table(data_imputed$Status, data_imputed$Ascites)\ntable_status_hepatomegaly <- table(data_imputed$Status, data_imputed$Hepatomegaly)\ntable_status_spiders <- table(data_imputed$Status, data_imputed$Spiders)\ntable_status_edema <- table(data_imputed$Status, data_imputed$Edema)\n\n# Visualize the relationship using stacked bar charts\npar(mfrow = c(2, 2))  # Set up a 2x2 layout for plots\nbarplot(table_ascites, beside = TRUE, legend = TRUE, main = \"Ascites vs. Status\")\nbarplot(table_hepatomegaly, beside = TRUE, legend = TRUE, main = \"Hepatomegaly vs. Status\")\nbarplot(table_spiders, beside = TRUE, legend = TRUE, main = \"Spiders vs. Status\")\nbarplot(table_edema, beside = TRUE, legend = TRUE, main = \"Edema vs. Status\")\n\n# Conduct chi-square tests for independence\nchi_sq_ascites <- chisq.test(table_ascites)\nchi_sq_hepatomegaly <- chisq.test(table_hepatomegaly)\nchi_sq_spiders <- chisq.test(table_spiders)\nchi_sq_edema <- chisq.test(table_edema)\n\n# Conduct chi-square tests for independence with Status and each disease-related feature\nchi_sq_status_ascites <- chisq.test(table_status_ascites)\nchi_sq_status_hepatomegaly <- chisq.test(table_status_hepatomegaly)\nchi_sq_status_spiders <- chisq.test(table_status_spiders)\nchi_sq_status_edema <- chisq.test(table_status_edema)\n\n# Print the results of chi-square tests\nprint(\"Chi-square test results for Ascites vs. Status:\")\nprint(chi_sq_ascites)\nprint(\"Chi-square test results for Hepatomegaly vs. Status:\")\nprint(chi_sq_hepatomegaly)\nprint(\"Chi-square test results for Spiders vs. Status:\")\nprint(chi_sq_spiders)\nprint(\"Chi-square test results for Edema vs. Status:\")\nprint(chi_sq_edema)\n\n# Print the results of chi-square tests for Status and each disease-related feature\nprint(\"Chi-square test results for Status vs. Ascites:\")\nprint(chi_sq_status_ascites)\nprint(\"Chi-square test results for Status vs. Hepatomegaly:\")\nprint(chi_sq_status_hepatomegaly)\nprint(\"Chi-square test results for Status vs. Spiders:\")\nprint(chi_sq_status_spiders)\nprint(\"Chi-square test results for Status vs. Edema:\")\nprint(chi_sq_status_edema)\n\n\n#Overall, Ascites, Hepatomegaly, and Edema seem to have a significant impact on the disease outcome,\n#based on their lower p-values compared to Spiders.\n#Among these, Ascites and Hepatomegaly might have slightly stronger associations with the disease outcome, given their lower p-values.\n\n# Define thresholds for abnormal values based on general reference ranges\nthresholds <- list(\n  Bilirubin = c(0.3, 1.2),              # Normal total bilirubin levels (mg/dL)\n  Cholesterol = c(0, 200),               # Normal total cholesterol levels (mg/dL)\n  Albumin = c(3.5, 5.0),                 # Normal serum albumin levels (g/dL)\n  Copper = c(70, 140),                   # Normal serum copper levels (Âµg/dL)\n  Alk_Phos = c(44, 147),                 # Normal alkaline phosphatase levels (IU/L)\n  SGOT = c(0, 40),                       # Normal serum glutamic-oxaloacetic transaminase levels (IU/L)\n  Tryglicerides = c(0, 150),             # Normal triglyceride levels (mg/dL)\n  Platelets = c(150, 450),         # Normal platelet counts (per microliter of blood)\n  Prothrombin = c(11, 13.5)              # Normal prothrombin time (seconds)\n)\n\n# Select the relevant lab value columns\nlab_columns <- cirrhosis_data %>%\n  select(Bilirubin, Cholesterol, Albumin, Copper, Alk_Phos, SGOT, Tryglicerides, Platelets, Prothrombin)\n\n# Ensure numeric lab values\nlab_columns <- lab_columns %>% mutate_all(as.numeric)\n\n# Identify rows without missing values\ncomplete_cases <- complete.cases(lab_columns)\n\n# Filter both the original and lab data based on complete rows\nlab_values <- lab_columns[complete_cases, ]\ncirrhosis_data_clean <- cirrhosis_data[complete_cases, ]\n\n# Apply k-means clustering\nset.seed(123)\nkmeans_clusters <- kmeans(scale(lab_values), centers = 3)  # Adjust the number of clusters as needed\ncirrhosis_data_clean$Cluster <- as.factor(kmeans_clusters$cluster)\n\n# Function to classify values based on thresholds\nclassify_abnormal <- function(value, range) {\n  if (is.na(value)) {\n    return(NA)\n  } else if (value < range[1] || value > range[2]) {\n    return(\"Abnormal\")\n  } else {\n    return(\"Normal\")\n  }\n}\n\n# Apply the function to classify each lab value based on the thresholds\nfor (param in names(thresholds)) {\n  cirrhosis_data_clean[[paste0(param, \"_Class\")]] <- mapply(classify_abnormal, cirrhosis_data_clean[[param]], MoreArgs = list(range = thresholds[[param]]))\n}\n\n# Calculate the proportion of abnormal lab values per cluster\nabnormal_props <- cirrhosis_data_clean %>%\n  group_by(Cluster) %>%\n  summarize(across(ends_with(\"_Class\"), ~ mean(. == \"Abnormal\", na.rm = TRUE)))\n\nprint(abnormal_props)\n\n# Survival Analysis\nlibrary(survival)\n\n# Create the survival object\nsurv_obj <- Surv(time = cirrhosis_data_clean$N_Days, event = ifelse(cirrhosis_data_clean$Status == \"D\", 1, 0))\n\n# Fit the survival model by clusters\nfit <- survfit(surv_obj ~ Cluster, data = cirrhosis_data_clean)\n\n# Plot Kaplan-Meier survival curves\nplot(fit, col = 1:3, lty = 1:3, xlab = \"Time (days)\", ylab = \"Survival Probability\")\nlegend(\"topright\", legend = levels(cirrhosis_data_clean$Cluster), col = 1:3, lty = 1:3)\n\n# Log-rank test to compare survival curves\nlog_rank_test <- survdiff(surv_obj ~ Cluster, data = cirrhosis_data_clean)\np_value <- 1 - pchisq(log_rank_test$chisq, length(log_rank_test$n) - 1)\ntitle(sub = paste(\"Log-rank p-value:\", round(p_value, 4)))\n\n# Calculate the midpoint of the threshold range for each variable\nthreshold_midpoints <- sapply(thresholds, function(x) mean(x))\n\n# Calculate the distance of each observation's value from the midpoint of the threshold range for each variable\ndistances <- sapply(names(thresholds), function(var) abs(cirrhosis_data_clean[[var]] - threshold_midpoints[var]))\n\n# Summarize the distance across all threshold variables for each observation\ntotal_distance <- rowSums(distances)\n\n# Define a threshold for defining \"heavily abnormal\" observations\nthreshold_distance <- 3  # Example threshold (can be adjusted based on your requirements)\n\n# Determine which variables are heavily abnormal for each observation\nheavily_abnormal_vars <- apply(distances, 1, function(x) names(thresholds)[x > threshold_distance])\n\n# Create a new column indicating observations where the summarized distance exceeds the defined threshold\ncirrhosis_data_clean$Heavily_Abnormal <- ifelse(total_distance > threshold_distance, paste0(\"(\", paste(heavily_abnormal_vars, collapse = \", \"), \")\"), \"\")\n\n# Print the first few rows of the updated dataset\nhead(data_imputed)\n\n#now we will decide the feature variables whether they are normal or abnormal with help of statistical analysis \n#visualization and references.\n\n# Calculate summary statistics\nsummary_stats <- summary(data_imputed[, c(\"Bilirubin\", \"Cholesterol\", \"Albumin\", \"Copper\", \"Alk_Phos\", \"SGOT\", \"Tryglicerides\", \"Platelets\", \"Prothrombin\")])\nprint(summary_stats)\n\n#measures such as mean, median, standard deviation, minimum, and maximum. This will give you an overview of the distribution of values and help identify potential outliers.\n\n\n# Visualize the distribution using boxplots\nboxplot(data[, c(\"Bilirubin\", \"Cholesterol\", \"Albumin\", \"Copper\", \"Alk_Phos\", \"SGOT\", \"Tryglicerides\", \"Platelets\", \"Prothrombin\")])\n\n#Look for any extreme values or unusual patterns in the data that may indicate abnormality.\n\n#Clinical Guidelines:\n#we'll need to consult clinical guidelines or literature for reference ranges. For example, for bilirubin, you might consider a range of 0.2-1.2 mg/dL as normal.\n#Expert Opinion:\n#Seek input from medical professionals or domain experts who can provide guidance on what values are considered abnormal in the context of liver cirrhosis.\n\n\n#research questions \n\n\n#1)Is there a significant interaction effect between drug treatment (D-penicillamine vs placebo) and ascites status (present vs absent) on survival time?\n\nlibrary(survival)\nlibrary(car)\nlibrary(ggplot2)\nlibrary(survminer)\n# Convert 'Status' to a binary indicator\ndata_imputed$Event <- ifelse(data_imputed$Status == \"D\", 1, 0)\n\n# Create survival object\nsurv_obj <- Surv(time = data_imputed$N_Days, event = data_imputed$Event)\n\n# Fit a Cox proportional hazards model with the new survival object\ncoxph_model <- coxph(surv_obj ~ Drug * Ascites, data = data_imputed)\n\ncoef(coxph_model)\n# Test the interaction effect\nAnova(coxph_model, type = \"III\")\n\n# Create a factor variable for the combination of Drug and Ascites\ndata_imputed$Drug_Ascites <- with(data_imputed, interaction(Drug, Ascites))\n\n# Plot Kaplan-Meier survival curves\nggsurvplot(\n  survfit(surv_obj ~ Drug_Ascites, data = data_imputed),\n  data = data_imputed,\n  risk.table = TRUE,\n  pval = TRUE,\n  conf.int = TRUE,\n  xlab = \"Time (days)\",\n  ggtheme = theme_bw()\n)\n\n#Drug: The likelihood ratio (LR) chi-square statistic is 0.0738 with 1 degree of freedom, resulting in a p-value of 0.7859. This indicates that the effect of the 'Drug' variable alone is not statistically significant.\n#Ascites: The LR chi-square statistic is 10.8940 with 1 degree of freedom, yielding a highly significant p-value of 0.0009647. This suggests that the presence of ascites significantly affects survival outcomes.\n#Drug:Ascites Interaction: The LR chi-square statistic is 0.0923 with 1 degree of freedom, leading to a p-value of 0.7613. This implies that there is no statistically significant interaction effect between 'Drug' and 'Ascites' on survival outcomes.\n#These results indicate that while ascites is a significant predictor of survival outcomes, neither the 'Drug' variable nor its interaction with ascites significantly affects survival outcomes in this analysis.\n\n\n#2)Do the distributions of lab values (bilirubin, albumin, etc.) differ significantly between patients with and without edema?\n\nlibrary(dplyr)\nlibrary(ggpubr)\n\n# Group patients by edema status\ncirrhosis_edema <- data_imputed %>% \n  mutate(Edema_Status = ifelse(Edema %in% c(\"Y\", \"S\"), \"Edema\", \"No Edema\"))\n\n# Perform one-way ANOVA or Kruskal-Wallis tests for each lab value\nggboxplot(cirrhosis_edema, x=\"Edema_Status\", y=\"Bilirubin\") + \n  stat_compare_means(method=\"anova\")\n\n\nkruskal.test(Albumin ~ Edema_Status, data=cirrhosis_edema)\n\n#3)Do the relationships between lab values (e.g. bilirubin vs albumin) differ significantly between treatment groups?\n\n# Load required libraries\nlibrary(randomForest)\nlibrary(caret)\n\n# Define your dataset and target variable\nX <- cirrhosis_data[, c(\"Bilirubin\", \"Albumin\")]\ny <- as.factor(cirrhosis_data$Drug)  # Convert Treatment to a factor for classification\n\n# Split data into training and testing sets\nset.seed(123)\ntrain_index <- createDataPartition(y, p = 0.8, list = FALSE)\nX_train <- X[train_index, ]\ny_train <- y[train_index]\nX_test <- X[-train_index, ]\ny_test <- y[-train_index]\n\n# Train separate Random Forest models for each treatment group\n# Train separate Random Forest models for each treatment group\ntreatment_levels <- levels(y)\nrf_models <- list()\nfor (treatment_level in treatment_levels) {\n  y_train_treatment <- ifelse(y_train == treatment_level, 1, 0)  # Convert treatment level to binary indicator\n  rf_models[[treatment_level]] <- randomForest(x = X_train, y = y_train_treatment, ntree = 100)\n}\n\nfeature_importance <- lapply(rf_models, importance)\n\n# Print feature importance for each treatment group\nfor (treatment_level in treatment_levels) {\n  cat(\"Treatment Group:\", treatment_level, \"\\n\")\n  print(feature_importance[[treatment_level]])\n  cat(\"\\n\")\n}\n\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"code.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","code-summary":"Show the code","theme":"flatly","title":"code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}