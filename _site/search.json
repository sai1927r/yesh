[
  {
    "objectID": "researchquestion.html",
    "href": "researchquestion.html",
    "title": "Research Questions",
    "section": "",
    "text": "Question 1\n1)Is there a significant interaction effect between drug treatment (D-penicillamine vs placebo) and ascites status (present vs absent) on survival time?\nData Preparation: The dataset was first read and cleaned by removing missing values (na.omit). A new binary variable called Event was created to distinguish deaths (coded as “D”) from other statuses. This new column served as the event indicator for the survival analysis.\nSurvival Object Creation: A survival object (surv_obj) was constructed using the Surv function with the event indicator and survival time in days (N_Days).\nCox Model: Cox’s proportional hazards model is analogous to a multiple regression model and enables the difference between survival times of particular groups of patients to be tested while allowing for other factors. A Cox proportional hazards model was fitted using the coxph function, including an interaction term (Drug * Ascites) to assess the combined effect of drug treatment and ascites on survival.\nInteraction Test: ANOVA stands for Analysis of Variance. It is a statistical method used to analyze the differences between the means of two or more groups or treatments. The significance of the interaction effect was evaluated using an ANOVA test with type III sums of squares via the Anova function from the car package.\nThe Pearson chi-square statistic (χ 2) involves the squared difference between the observed and the expected frequencies.\nThe likelihood-ratio chi-square statistic (G2) is based on the ratio of the observed to the expected frequencies.\nVisualization with Kaplan-Meier Plot:\nA new grouping variable, Drug_Ascites, was created to represent the four unique groups formed by the combinations of drug treatment and ascites status.\n\nA Kaplan-Meier plot was generated using the ggsurvplot function to visualize the survival curves across these four groups.\nThe plot includes a risk table (showing the number of subjects at risk at different time points), a confidence interval, and a p-value to highlight significant differences among the groups.\n\nOverall, this approach effectively identifies and visualizes the impact of the drug and ascites interaction on patient survival, providing valuable insights into the relationship between these factors\n\n\nCode\nlibrary(survival)\nlibrary(car)\nlibrary(ggplot2)\nlibrary(survminer)\n\ndata = read.csv(\"C:/Users/HP/Downloads/cirrhosis+patient+survival+prediction+dataset-1/cirrhosis.csv\")\ndata_imputed &lt;- na.omit(data)\ncirrhosis_data &lt;- na.omit(data_imputed)\n\n# Convert 'Status' to a binary indicator\ndata_imputed$Event &lt;- ifelse(data_imputed$Status == \"D\", 1, 0)\n\n# Create survival object\nsurv_obj &lt;- Surv(time = data_imputed$N_Days, event = data_imputed$Event)\n\n# Fit a Cox proportional hazards model with the new survival object\ncoxph_model &lt;- coxph(surv_obj ~ Drug * Ascites, data = data_imputed)\n\ncoef(coxph_model)\n\n\n         DrugPlacebo             AscitesY DrugPlacebo:AscitesY \n          -0.1030267            2.1423633            0.3507101 \n\n\nCode\n# Test the interaction effect\nAnova(coxph_model, type = \"III\")\n\n\nAnalysis of Deviance Table (Type III tests)\n             LR Chisq Df Pr(&gt;Chisq)    \nDrug           0.2462  1     0.6198    \nAscites       23.0446  1  1.583e-06 ***\nDrug:Ascites   0.4391  1     0.5075    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nCode\n# Create a factor variable for the combination of Drug and Ascites\ndata_imputed$Drug_Ascites &lt;- with(data_imputed, interaction(Drug, Ascites))\n\n# Plot Kaplan-Meier survival curves\nggsurvplot(\n  survfit(surv_obj ~ Drug_Ascites, data = data_imputed),\n  data = data_imputed,\n  risk.table = TRUE,\n  pval = TRUE,\n  conf.int = TRUE,\n  xlab = \"Time (days)\",\n  ggtheme = theme_bw()\n)\n\n\n\n\n\nThe Kaplan-Meier survival curves reveal that the presence of ascites significantly impacts patient survival, with those affected by ascites showing much lower survival probabilities than those without. The survival probabilities for patients treated with D-penicillamine and those treated with a placebo are relatively similar within each ascites group. The statistical tests confirm that while ascites has a significant impact on survival (p &lt; 0.0001), there isn’t a significant interaction between drug treatment and ascites status affecting survival. This implies that ascites plays a much more influential role in determining patient outcomes than the type of treatment administered.\n\n\nQuestion 2\n2)Do the distributions of lab values (bilirubin, albumin, etc.) differ significantly between patients with and without edema?\nData Grouping: The dataset was grouped into two categories: “Edema” (patients with any form of edema) and “No Edema” (patients without edema). This grouping was done by creating a new column called Edema_Status based on the existing Edema column, where statuses “Y” (Yes) and “S” (Slight) were considered as “Edema.”\nVisualization and Statistical Testing: A boxplot was used to visualize the distribution of the Bilirubin lab values across the two groups. This was achieved using ggboxplot from the ggpubr package, and an ANOVA (Analysis of Variance) test was applied to compare mean differences. For the Albumin lab values, a Kruskal-Wallis test (a non-parametric alternative to ANOVA) was conducted to check for significant differences across groups since this test is more suitable for non-normal distributions.\nInterpretation: The boxplot visually compares the bilirubin distributions between the two edema groups while providing statistical significance via the ANOVA p-value. The Kruskal-Wallis test for albumin determines whether the differences between edema groups are statistically significant for this specific lab value.\n\n\nCode\nlibrary(dplyr)\nlibrary(ggpubr)\n\n# Group patients by edema status\ncirrhosis_edema &lt;- data_imputed %&gt;% \n  mutate(Edema_Status = ifelse(Edema %in% c(\"Y\", \"S\"), \"Edema\", \"No Edema\"))\n\n# Perform one-way ANOVA or Kruskal-Wallis tests for each lab value\nggboxplot(cirrhosis_edema, x=\"Edema_Status\", y=\"Bilirubin\") + \n  stat_compare_means(method=\"anova\")\n\n\n\n\n\nCode\nkruskal.test(Albumin ~ Edema_Status, data=cirrhosis_edema)\n\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  Albumin by Edema_Status\nKruskal-Wallis chi-squared = 24.13, df = 1, p-value = 9.005e-07\n\n\nThe analysis shows that both bilirubin and albumin levels differ significantly between patients with and without edema. The boxplot indicates that patients with edema have substantially higher bilirubin levels than those without. This difference is statistically significant, as reflected by the ANOVA p-value (p = 1.6e-11). Similarly, the Kruskal-Wallis test reveals a significant difference in albumin levels between the two groups (p = 9.005e-07). This suggests that edema status is associated with elevated bilirubin and reduced albumin levels, indicating a worsening clinical condition.\n\n\nQuestion 3\n3)Do the relationships between lab values (e.g. bilirubin vs albumin) differ significantly between treatment groups?\nDataset Preparation: The dataset was filtered to include only the relevant lab values (Bilirubin and Albumin) as predictor variables (X), while the treatment groups (Drug) were used as the target variable (y). The treatment groups were converted into a factor to be used for classification purposes.\nTraining and Testing Split: The dataset was randomly partitioned into training (80%) and testing (20%) sets to ensure that model evaluation would be done on unseen data.\nRandom Forest Models: For each treatment group level, a separate binary classification model was created. The model was trained to distinguish whether a sample belonged to that treatment group. For instance, if the treatment group is D-penicillamine, the model is trained to identify samples either belonging to D-penicillamine (1) or not (0). Random forest models were trained on the training data for each treatment level using the predictor variables (Bilirubin and Albumin).\nFeature Importance Analysis: The feature importance for each treatment group was calculated using the random forest models, which evaluate how influential each predictor variable is for classification. The results are printed, showing which lab value plays a significant role in distinguishing patients within each treatment group.\n\n\nCode\nlibrary(randomForest)\nlibrary(caret)\n\n# Define your dataset and target variable\nX &lt;- cirrhosis_data[, c(\"Bilirubin\", \"Albumin\")]\ny &lt;- as.factor(cirrhosis_data$Drug)  # Convert Treatment to a factor for classification\n\n# Split data into training and testing sets\nset.seed(123)\ntrain_index &lt;- createDataPartition(y, p = 0.8, list = FALSE)\nX_train &lt;- X[train_index, ]\ny_train &lt;- y[train_index]\nX_test &lt;- X[-train_index, ]\ny_test &lt;- y[-train_index]\n\n# Train separate Random Forest models for each treatment group\n# Train separate Random Forest models for each treatment group\ntreatment_levels &lt;- levels(y)\nrf_models &lt;- list()\nfor (treatment_level in treatment_levels) {\n  y_train_treatment &lt;- ifelse(y_train == treatment_level, 1, 0)  # Convert treatment level to binary indicator\n  rf_models[[treatment_level]] &lt;- randomForest(x = X_train, y = y_train_treatment, ntree = 100)\n}\n\nfeature_importance &lt;- lapply(rf_models, importance)\n\n# Print feature importance for each treatment group\nfor (treatment_level in treatment_levels) {\n  cat(\"Treatment Group:\", treatment_level, \"\\n\")\n  print(feature_importance[[treatment_level]])\n  cat(\"\\n\")\n}\n\n\nTreatment Group: D-penicillamine \n          IncNodePurity\nBilirubin      18.87986\nAlbumin        22.87848\n\nTreatment Group: Placebo \n          IncNodePurity\nBilirubin      18.68447\nAlbumin        22.79035\n\n\nThe analysis shows that for both treatment groups, D-penicillamine and placebo, albumin is a more important feature than bilirubin in distinguishing between patients. This is evident from the higher IncNodePurity scores for albumin compared to bilirubin in both groups. Despite the treatment type, albumin consistently plays a more significant role in classification, indicating that albumin levels are a crucial clinical marker for differentiating patient responses and predicting outcomes. The consistency in importance across groups suggests that albumin’s predictive relationship remains similar regardless of treatment type.\n\n\nReferences:\n[1]By Anon.“UCI Machine Learning Repository,” archive.ics.uci.edu. https://archive.ics.uci.edu/dataset/878/cirrhosis+patient+survival+prediction+dataset-1\n[2]E. A. Roberts, “Update on the Diagnosis and Management of Wilson Disease,” Current Gastroenterology Reports, vol. 20, no. 12, Nov. 2018, doi: https://doi.org/10.1007/s11894-018-0660-7.\n[3]K. Zachou et al., “Review article: autoimmune hepatitis - current management and challenges,” Alimentary Pharmacology & Therapeutics, vol. 38, no. 8, pp. 887–913, Sep. 2013, doi: https://doi.org/10.1111/apt.12470.\n[4]G. V. Papatheodoridis, P. Lampertico, S. Manolakopoulos, and A. Lok, “Incidence of hepatocellular carcinoma in chronic hepatitis B patients receiving nucleos(t)ide therapy: A systematic review,” Journal of Hepatology, vol. 53, no. 2, pp. 348–356, Aug. 2010, doi: https://doi.org/10.1016/j.jhep.2010.02.035."
  },
  {
    "objectID": "contactus.html",
    "href": "contactus.html",
    "title": "Contact Us",
    "section": "",
    "text": "Group Number : 3\n\nYeshwanth Reddy\nMaster’s in Data Analytics Engineering\nEmail: sgowram@gmu.edu\n\n\nSanjay Reddy\nMaster’s in Data Analytics Engineering\nEmail : smarri@gmu.edu\n\n\nPrawanth Reddy\nMaster’s in Data Analytics Engineering\nEmail : ptalasan@gmu.edu"
  },
  {
    "objectID": "application.html",
    "href": "application.html",
    "title": "Normality check",
    "section": "",
    "text": "This application describes whether the input values for different medical parameters are within normal bounds. Predefined thresholds for several values, including albumin, cholesterol, bilirubin, and others, are included in the program and are kept in a list called thresholds.\nTo ascertain whether a given value falls inside the typical range for a particular parameter, the is_within_normal_range function is defined. It determines if the input value is “Normal” or “Abnormal” by comparing it to predetermined thresholds.\nOverall, this application helps with medical assessment and diagnosis by offering a straightforward interface for users to enter medical parameter values and rapidly ascertain whether they fall within normal ranges.\n\n https://yeshwanthreddy.shinyapps.io/appp/"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Statistical Analysis of the Dataset",
    "section": "",
    "text": "Distribution of Variables\nIt represents the number of visualizations to examine the distribution of different variables in the dataset using the R ggplot2 library. Different plots are produced by each ggplot call; they include histograms for continuous variables like age, bilirubin levels, and platelet counts, and bar charts for categorical variables like drug type, sex, and disease status. Value distribution is efficiently seen by building the histograms with predetermined bin widths. With their thorough overview of the dataset, these visualizations make it easier to spot trends, patterns, and possible outliers in a variety of variables. All things considered, this method effectively condenses the dataset’s distributional properties, providing a strong basis for more exploratory data analysis and statistical modeling.\n\n\nCode\ndata = read.csv(\"C:/Users/HP/Downloads/cirrhosis+patient+survival+prediction+dataset-1/cirrhosis.csv\")\nmissing_values &lt;- colSums(is.na(data))\n# If there are missing values, impute them using mean imputation\ndata_imputed &lt;- na.omit(data)\ncirrhosis_data &lt;- na.omit(data_imputed)\nhead(cirrhosis_data)\n\n\n  ID N_Days Status            Drug   Age Sex Ascites Hepatomegaly Spiders Edema\n1  1    400      D D-penicillamine 21464   F       Y            Y       Y     Y\n2  2   4500      C D-penicillamine 20617   F       N            Y       Y     N\n3  3   1012      D D-penicillamine 25594   M       N            N       N     S\n4  4   1925      D D-penicillamine 19994   F       N            Y       Y     S\n5  5   1504     CL         Placebo 13918   F       N            Y       Y     N\n7  7   1832      C         Placebo 20284   F       N            Y       N     N\n  Bilirubin Cholesterol Albumin Copper Alk_Phos   SGOT Tryglicerides Platelets\n1      14.5         261    2.60    156   1718.0 137.95           172       190\n2       1.1         302    4.14     54   7394.8 113.52            88       221\n3       1.4         176    3.48    210    516.0  96.10            55       151\n4       1.8         244    2.54     64   6121.8  60.63            92       183\n5       3.4         279    3.53    143    671.0 113.15            72       136\n7       1.0         322    4.09     52    824.0  60.45           213       204\n  Prothrombin Stage\n1        12.2     4\n2        10.6     3\n3        12.0     4\n4        10.3     4\n5        10.9     3\n7         9.7     3\n\n\n\n\nCode\nlibrary(dplyr)  \nlibrary(ggplot2)\n\n\n# Drug\nggplot(data_imputed, aes(x = Drug)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Drug\", y = \"Count\", title = \"Distribution of Drug\")\n\n\n\n\n\nCode\n# Age\nggplot(data_imputed, aes(x = Age)) +\n  geom_histogram(binwidth = 1000, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Age\", y = \"Frequency\", title = \"Distribution of Age\")\n\n\n\n\n\nCode\n# Ascites\nggplot(data_imputed, aes(x = Ascites)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Ascites\", y = \"Count\", title = \"Distribution of Ascites\")\n\n\n\n\n\nCode\n# Hepatomegaly\nggplot(data_imputed, aes(x = Hepatomegaly)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Hepatomegaly\", y = \"Count\", title = \"Distribution of Hepatomegaly\")\n\n\n\n\n\nCode\n# Spiders\nggplot(data_imputed, aes(x = Spiders)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Spiders\", y = \"Count\", title = \"Distribution of Spiders\")\n\n\n\n\n\nCode\n# Edema\nggplot(data_imputed, aes(x = Edema)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Edema\", y = \"Count\", title = \"Distribution of Edema\")\n\n\n\n\n\nCode\n# Bilirubin\nggplot(data_imputed, aes(x = Bilirubin)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Bilirubin\", y = \"Frequency\", title = \"Distribution of Bilirubin\")\n\n\n\n\n\nCode\n# Cholesterol\nggplot(data_imputed, aes(x = Cholesterol)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Cholesterol\", y = \"Frequency\", title = \"Distribution of Cholesterol\")\n\n\n\n\n\nCode\n# Albumin\nggplot(data_imputed, aes(x = Albumin)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Albumin\", y = \"Frequency\", title = \"Distribution of Albumin\")\n\n\n\n\n\nCode\n# Copper\nggplot(data_imputed, aes(x = Copper)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Copper\", y = \"Frequency\", title = \"Distribution of Copper\")\n\n\n\n\n\nCode\n# Alk_Phos\nggplot(data_imputed, aes(x = Alk_Phos)) +\n  geom_histogram(binwidth = 500, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Alkaline Phosphatase\", y = \"Frequency\", title = \"Distribution of Alkaline Phosphatase\")\n\n\n\n\n\nCode\n# SGOT\nggplot(data_imputed, aes(x = SGOT)) +\n  geom_histogram(binwidth = 10, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"SGOT\", y = \"Frequency\", title = \"Distribution of SGOT\")\n\n\n\n\n\nCode\n# Triglycerides\nggplot(data_imputed, aes(x = Tryglicerides)) +\n  geom_histogram(binwidth = 10, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Triglycerides\", y = \"Frequency\", title = \"Distribution of Triglycerides\")\n\n\n\n\n\nCode\n# Platelets\nggplot(data_imputed, aes(x = Platelets)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Platelets\", y = \"Frequency\", title = \"Distribution of Platelets\")\n\n\n\n\n\nCode\n# Prothrombin\nggplot(data_imputed, aes(x = Prothrombin)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Prothrombin\", y = \"Frequency\", title = \"Distribution of Prothrombin\")\n\n\n\n\n\nCode\n# Stage\nggplot(data_imputed, aes(x = Stage)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Stage\", y = \"Count\", title = \"Distribution of Stage\")\n\n\n\n\n\n\n\nDisease affecting the target variable\nA chi-square test is a statistical test used to compare observed results with expected results. The purpose of these chi-square tests is to evaluate the relationship between the target variable Status and each disease-related characteristic (edema, spiders, hepatomegaly, and ascites). The distribution of the disease-related characteristic is independent of the severity of the condition represented by Status, according to the null hypothesis for each test, which states that there is no association between the disease-related feature and Status. An relationship between the two variables is the alternate hypothesis.\nEach chi-square test’s p-value expresses the likelihood of seeing the data in the event that the null hypothesis were correct. A low p-value (&lt; 0.05) indicates that there is enough data to rule out the null hypothesis and draw the conclusion that Status and the disease-related characteristic are significantly correlated.\n\n\nCode\n# Create contingency tables for each disease-related feature and Status\ntable_ascites &lt;- table(data_imputed$Ascites, data_imputed$Status)\ntable_hepatomegaly &lt;- table(data_imputed$Hepatomegaly, data_imputed$Status)\ntable_spiders &lt;- table(data_imputed$Spiders, data_imputed$Status)\ntable_edema &lt;- table(data_imputed$Edema, data_imputed$Status)\n\n# Visualize the relationship using stacked bar charts\npar(mfrow = c(2, 2))  # Set up a 2x2 layout for plots\nbarplot(table_ascites, beside = TRUE, legend = TRUE, main = \"Ascites vs. Status\")\nbarplot(table_hepatomegaly, beside = TRUE, legend = TRUE, main = \"Hepatomegaly vs. Status\")\nbarplot(table_spiders, beside = TRUE, legend = TRUE, main = \"Spiders vs. Status\")\nbarplot(table_edema, beside = TRUE, legend = TRUE, main = \"Edema vs. Status\")\n\n\n\n\n\nCode\n# Conduct chi-square tests for independence\nchi_sq_ascites &lt;- chisq.test(table_ascites)\nchi_sq_hepatomegaly &lt;- chisq.test(table_hepatomegaly)\nchi_sq_spiders &lt;- chisq.test(table_spiders)\nchi_sq_edema &lt;- chisq.test(table_edema)\n\n# Print the results of chi-square tests\nprint(\"Chi-square test results for Ascites vs. Status:\")\n\n\n[1] \"Chi-square test results for Ascites vs. Status:\"\n\n\nCode\nprint(chi_sq_ascites)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_ascites\nX-squared = 25.237, df = 2, p-value = 3.31e-06\n\n\nCode\nprint(\"Chi-square test results for Hepatomegaly vs. Status:\")\n\n\n[1] \"Chi-square test results for Hepatomegaly vs. Status:\"\n\n\nCode\nprint(chi_sq_hepatomegaly)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_hepatomegaly\nX-squared = 24.805, df = 2, p-value = 4.109e-06\n\n\nCode\nprint(\"Chi-square test results for Spiders vs. Status:\")\n\n\n[1] \"Chi-square test results for Spiders vs. Status:\"\n\n\nCode\nprint(chi_sq_spiders)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_spiders\nX-squared = 14.5, df = 2, p-value = 0.0007102\n\n\nCode\nprint(\"Chi-square test results for Edema vs. Status:\")\n\n\n[1] \"Chi-square test results for Edema vs. Status:\"\n\n\nCode\nprint(chi_sq_edema)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_edema\nX-squared = 31.267, df = 4, p-value = 2.7e-06\n\n\nAlthough the p-value (0.0007102) is slightly larger than the typical significance level of 0.05, it is still considered statistically significant. Thus, we conclude that there is a significant association between Spiders and Status.\n\n\nClustering\nThe thresholds for aberrant values derived from broad reference ranges for a variety of laboratory measures that are frequently linked to the health and function of the liver.\nTo find patient groups with comparable laboratory profiles, we apply k-means clustering to the scaled laboratory values.\nConstruction of a survival object based on the time to an event death and fits a survival model using the Kaplan-Meier estimator. Kaplan-Meier survival curves are plotted for each cluster, showing the probability of survival over time.\n\n\nCode\n# Define thresholds for abnormal values based on general reference ranges\nthresholds &lt;- list(\n  Bilirubin = c(0.3, 1.2),              # Normal total bilirubin levels (mg/dL)\n  Cholesterol = c(0, 200),               # Normal total cholesterol levels (mg/dL)\n  Albumin = c(3.5, 5.0),                 # Normal serum albumin levels (g/dL)\n  Copper = c(70, 140),                   # Normal serum copper levels (µg/dL)\n  Alk_Phos = c(44, 147),                 # Normal alkaline phosphatase levels (IU/L)\n  SGOT = c(0, 40),                       # Normal serum glutamic-oxaloacetic transaminase levels (IU/L)\n  Tryglicerides = c(0, 150),             # Normal triglyceride levels (mg/dL)\n  Platelets = c(150, 450),         # Normal platelet counts (per microliter of blood)\n  Prothrombin = c(11, 13.5)              # Normal prothrombin time (seconds)\n)\n\n# Select the relevant lab value columns\nlab_columns &lt;- cirrhosis_data %&gt;%\n  select(Bilirubin, Cholesterol, Albumin, Copper, Alk_Phos, SGOT, Tryglicerides, Platelets, Prothrombin)\n\n# Ensure numeric lab values\nlab_columns &lt;- lab_columns %&gt;% mutate_all(as.numeric)\n\n# Identify rows without missing values\ncomplete_cases &lt;- complete.cases(lab_columns)\n\n# Filter both the original and lab data based on complete rows\nlab_values &lt;- lab_columns[complete_cases, ]\ncirrhosis_data_clean &lt;- cirrhosis_data[complete_cases, ]\n\n# Apply k-means clustering\nset.seed(123)\nkmeans_clusters &lt;- kmeans(scale(lab_values), centers = 3)  # Adjust the number of clusters as needed\ncirrhosis_data_clean$Cluster &lt;- as.factor(kmeans_clusters$cluster)\n\n# Function to classify values based on thresholds\nclassify_abnormal &lt;- function(value, range) {\n  if (is.na(value)) {\n    return(NA)\n  } else if (value &lt; range[1] || value &gt; range[2]) {\n    return(\"Abnormal\")\n  } else {\n    return(\"Normal\")\n  }\n}\n\n# Apply the function to classify each lab value based on the thresholds\nfor (param in names(thresholds)) {\n  cirrhosis_data_clean[[paste0(param, \"_Class\")]] &lt;- mapply(classify_abnormal, cirrhosis_data_clean[[param]], MoreArgs = list(range = thresholds[[param]]))\n}\n\n# Calculate the proportion of abnormal lab values per cluster\nabnormal_props &lt;- cirrhosis_data_clean %&gt;%\n  group_by(Cluster) %&gt;%\n  summarize(across(ends_with(\"_Class\"), ~ mean(. == \"Abnormal\", na.rm = TRUE)))\n\nprint(abnormal_props)\n\n\n# A tibble: 3 × 10\n  Cluster Bilirubin_Class Cholesterol_Class Albumin_Class Copper_Class\n  &lt;fct&gt;             &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n1 1                 0.978             0.911         0.756        0.733\n2 2                 0.496             0.866         0.433        0.756\n3 3                 0.452             1             0.298        0.606\n# ℹ 5 more variables: Alk_Phos_Class &lt;dbl&gt;, SGOT_Class &lt;dbl&gt;,\n#   Tryglicerides_Class &lt;dbl&gt;, Platelets_Class &lt;dbl&gt;, Prothrombin_Class &lt;dbl&gt;\n\n\nCode\n# Survival Analysis\nlibrary(survival)\n\n# Create the survival object\nsurv_obj &lt;- Surv(time = cirrhosis_data_clean$N_Days, event = ifelse(cirrhosis_data_clean$Status == \"D\", 1, 0))\n\n# Fit the survival model by clusters\nfit &lt;- survfit(surv_obj ~ Cluster, data = cirrhosis_data_clean)\n\n# Plot Kaplan-Meier survival curves\nplot(fit, col = 1:3, lty = 1:3, xlab = \"Time (days)\", ylab = \"Survival Probability\")\nlegend(\"topright\", legend = levels(cirrhosis_data_clean$Cluster), col = 1:3, lty = 1:3)\n\n# Log-rank test to compare survival curves\nlog_rank_test &lt;- survdiff(surv_obj ~ Cluster, data = cirrhosis_data_clean)\np_value &lt;- 1 - pchisq(log_rank_test$chisq, length(log_rank_test$n) - 1)\ntitle(sub = paste(\"Log-rank p-value:\", round(p_value, 4)))\n\n\n\n\n\n\n\nDescribing which variables are heavily abnormal\nIn general, this code offers a methodical approach to recognize observations that display significant departures from typical values for several laboratory parameters, assisting in the identification of potentially alarming situations that require additional examination.\n\n\nCode\n# Calculate the midpoint of the threshold range for each variable\nthreshold_midpoints &lt;- sapply(thresholds, function(x) mean(x))\n\n# Calculate the distance of each observation's value from the midpoint of the threshold range for each variable\ndistances &lt;- sapply(names(thresholds), function(var) abs(cirrhosis_data_clean[[var]] - threshold_midpoints[var]))\n\n# Summarize the distance across all threshold variables for each observation\ntotal_distance &lt;- rowSums(distances)\n\n# Define a threshold for defining \"heavily abnormal\" observations\nthreshold_distance &lt;- 3  # Example threshold (can be adjusted based on your requirements)\n\n# Determine which variables are heavily abnormal for each observation\nheavily_abnormal_vars &lt;- apply(distances, 1, function(x) names(thresholds)[x &gt; threshold_distance])\n\n# Create a new column indicating observations where the summarized distance exceeds the defined threshold\ncirrhosis_data_clean$Heavily_Abnormal &lt;- ifelse(total_distance &gt; threshold_distance, paste0(\"(\", paste(heavily_abnormal_vars, collapse = \", \"), \")\"), \"\")\n\n\n\n\nOverall summary of dataset\nAn overview of each variable’s value distribution is given by this, making it easier to see any potential outliers or odd patterns, boxplots to see how the same variables are distributed. Boxplots make it simple to compare distributions across variables by displaying the data’s median, quartiles, and any outliers. In general, this code offers a methodical approach to recognize observations that display significant departures from typical values for several laboratory parameters, assisting in the identification of potentially alarming situations that require additional examination.\n\n\nCode\n# Calculate summary statistics\nsummary_stats &lt;- summary(data_imputed[, c(\"Bilirubin\", \"Cholesterol\", \"Albumin\", \"Copper\", \"Alk_Phos\", \"SGOT\", \"Tryglicerides\", \"Platelets\", \"Prothrombin\")])\nprint(summary_stats)\n\n\n   Bilirubin       Cholesterol        Albumin          Copper      \n Min.   : 0.300   Min.   : 120.0   Min.   :1.960   Min.   :  4.00  \n 1st Qu.: 0.800   1st Qu.: 249.5   1st Qu.:3.310   1st Qu.: 42.75  \n Median : 1.400   Median : 310.0   Median :3.545   Median : 74.00  \n Mean   : 3.334   Mean   : 371.3   Mean   :3.517   Mean   :100.77  \n 3rd Qu.: 3.525   3rd Qu.: 401.0   3rd Qu.:3.772   3rd Qu.:129.25  \n Max.   :28.000   Max.   :1775.0   Max.   :4.400   Max.   :588.00  \n    Alk_Phos            SGOT        Tryglicerides     Platelets    \n Min.   :  289.0   Min.   : 28.38   Min.   : 33.0   Min.   : 62.0  \n 1st Qu.:  922.5   1st Qu.: 82.46   1st Qu.: 85.0   1st Qu.:200.0  \n Median : 1277.5   Median :116.62   Median :108.0   Median :257.0  \n Mean   : 1996.6   Mean   :124.12   Mean   :125.0   Mean   :261.8  \n 3rd Qu.: 2068.2   3rd Qu.:153.45   3rd Qu.:151.2   3rd Qu.:318.2  \n Max.   :13862.4   Max.   :457.25   Max.   :598.0   Max.   :563.0  \n  Prothrombin   \n Min.   : 9.00  \n 1st Qu.:10.00  \n Median :10.60  \n Mean   :10.74  \n 3rd Qu.:11.20  \n Max.   :17.10  \n\n\nCode\n#measures such as mean, median, standard deviation, minimum, and maximum. This will give you an overview of the distribution of values and help identify potential outliers.\n\n\n# Visualize the distribution using boxplots\nboxplot(data[, c(\"Bilirubin\", \"Cholesterol\", \"Albumin\", \"Copper\", \"Alk_Phos\", \"SGOT\", \"Tryglicerides\", \"Platelets\", \"Prothrombin\")])"
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "code",
    "section": "",
    "text": "Code\ndata = read.csv(\"C:/Users/HP/Downloads/cirrhosis+patient+survival+prediction+dataset-1/cirrhosis.csv\")\nhead(data)\n\n\n  ID N_Days Status            Drug   Age Sex Ascites Hepatomegaly Spiders Edema\n1  1    400      D D-penicillamine 21464   F       Y            Y       Y     Y\n2  2   4500      C D-penicillamine 20617   F       N            Y       Y     N\n3  3   1012      D D-penicillamine 25594   M       N            N       N     S\n4  4   1925      D D-penicillamine 19994   F       N            Y       Y     S\n5  5   1504     CL         Placebo 13918   F       N            Y       Y     N\n6  6   2503      D         Placebo 24201   F       N            Y       N     N\n  Bilirubin Cholesterol Albumin Copper Alk_Phos   SGOT Tryglicerides Platelets\n1      14.5         261    2.60    156   1718.0 137.95           172       190\n2       1.1         302    4.14     54   7394.8 113.52            88       221\n3       1.4         176    3.48    210    516.0  96.10            55       151\n4       1.8         244    2.54     64   6121.8  60.63            92       183\n5       3.4         279    3.53    143    671.0 113.15            72       136\n6       0.8         248    3.98     50    944.0  93.00            63        NA\n  Prothrombin Stage\n1        12.2     4\n2        10.6     3\n3        12.0     4\n4        10.3     4\n5        10.9     3\n6        11.0     3\n\n\nCode\nstr(data)\n\n\n'data.frame':   418 obs. of  20 variables:\n $ ID           : int  1 2 3 4 5 6 7 8 9 10 ...\n $ N_Days       : int  400 4500 1012 1925 1504 2503 1832 2466 2400 51 ...\n $ Status       : chr  \"D\" \"C\" \"D\" \"D\" ...\n $ Drug         : chr  \"D-penicillamine\" \"D-penicillamine\" \"D-penicillamine\" \"D-penicillamine\" ...\n $ Age          : int  21464 20617 25594 19994 13918 24201 20284 19379 15526 25772 ...\n $ Sex          : chr  \"F\" \"F\" \"M\" \"F\" ...\n $ Ascites      : chr  \"Y\" \"N\" \"N\" \"N\" ...\n $ Hepatomegaly : chr  \"Y\" \"Y\" \"N\" \"Y\" ...\n $ Spiders      : chr  \"Y\" \"Y\" \"N\" \"Y\" ...\n $ Edema        : chr  \"Y\" \"N\" \"S\" \"S\" ...\n $ Bilirubin    : num  14.5 1.1 1.4 1.8 3.4 0.8 1 0.3 3.2 12.6 ...\n $ Cholesterol  : int  261 302 176 244 279 248 322 280 562 200 ...\n $ Albumin      : num  2.6 4.14 3.48 2.54 3.53 3.98 4.09 4 3.08 2.74 ...\n $ Copper       : int  156 54 210 64 143 50 52 52 79 140 ...\n $ Alk_Phos     : num  1718 7395 516 6122 671 ...\n $ SGOT         : num  137.9 113.5 96.1 60.6 113.2 ...\n $ Tryglicerides: int  172 88 55 92 72 63 213 189 88 143 ...\n $ Platelets    : int  190 221 151 183 136 NA 204 373 251 302 ...\n $ Prothrombin  : num  12.2 10.6 12 10.3 10.9 11 9.7 11 11 11.5 ...\n $ Stage        : int  4 3 4 4 3 3 3 3 2 4 ...\n\n\nCode\nmissing_values &lt;- colSums(is.na(data))\nprint(missing_values)\n\n\n           ID        N_Days        Status          Drug           Age \n            0             0             0           106             0 \n          Sex       Ascites  Hepatomegaly       Spiders         Edema \n            0           106           106           106             0 \n    Bilirubin   Cholesterol       Albumin        Copper      Alk_Phos \n            0           134             0           108           106 \n         SGOT Tryglicerides     Platelets   Prothrombin         Stage \n          106           136            11             2             6 \n\n\nCode\n# If there are missing values, impute them using mean imputation\ndata_imputed &lt;- na.omit(data)\n\nhead(data_imputed)\n\n\n  ID N_Days Status            Drug   Age Sex Ascites Hepatomegaly Spiders Edema\n1  1    400      D D-penicillamine 21464   F       Y            Y       Y     Y\n2  2   4500      C D-penicillamine 20617   F       N            Y       Y     N\n3  3   1012      D D-penicillamine 25594   M       N            N       N     S\n4  4   1925      D D-penicillamine 19994   F       N            Y       Y     S\n5  5   1504     CL         Placebo 13918   F       N            Y       Y     N\n7  7   1832      C         Placebo 20284   F       N            Y       N     N\n  Bilirubin Cholesterol Albumin Copper Alk_Phos   SGOT Tryglicerides Platelets\n1      14.5         261    2.60    156   1718.0 137.95           172       190\n2       1.1         302    4.14     54   7394.8 113.52            88       221\n3       1.4         176    3.48    210    516.0  96.10            55       151\n4       1.8         244    2.54     64   6121.8  60.63            92       183\n5       3.4         279    3.53    143    671.0 113.15            72       136\n7       1.0         322    4.09     52    824.0  60.45           213       204\n  Prothrombin Stage\n1        12.2     4\n2        10.6     3\n3        12.0     4\n4        10.3     4\n5        10.9     3\n7         9.7     3\n\n\nCode\ncirrhosis_data &lt;- na.omit(data_imputed)\nhead(cirrhosis_data)\n\n\n  ID N_Days Status            Drug   Age Sex Ascites Hepatomegaly Spiders Edema\n1  1    400      D D-penicillamine 21464   F       Y            Y       Y     Y\n2  2   4500      C D-penicillamine 20617   F       N            Y       Y     N\n3  3   1012      D D-penicillamine 25594   M       N            N       N     S\n4  4   1925      D D-penicillamine 19994   F       N            Y       Y     S\n5  5   1504     CL         Placebo 13918   F       N            Y       Y     N\n7  7   1832      C         Placebo 20284   F       N            Y       N     N\n  Bilirubin Cholesterol Albumin Copper Alk_Phos   SGOT Tryglicerides Platelets\n1      14.5         261    2.60    156   1718.0 137.95           172       190\n2       1.1         302    4.14     54   7394.8 113.52            88       221\n3       1.4         176    3.48    210    516.0  96.10            55       151\n4       1.8         244    2.54     64   6121.8  60.63            92       183\n5       3.4         279    3.53    143    671.0 113.15            72       136\n7       1.0         322    4.09     52    824.0  60.45           213       204\n  Prothrombin Stage\n1        12.2     4\n2        10.6     3\n3        12.0     4\n4        10.3     4\n5        10.9     3\n7         9.7     3\n\n\nCode\n# Load necessary libraries\nlibrary(dplyr)  # For data manipulation\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)  # For data visualization\nlibrary(caret)  # For machine learning model fitting\n\n\nWarning: package 'caret' was built under R version 4.3.3\n\n\nLoading required package: lattice\n\n\nCode\nlibrary(survival) # For survival analysis\n\n\n\nAttaching package: 'survival'\n\n\nThe following object is masked from 'package:caret':\n\n    cluster\n\n\nCode\nlibrary(anomalize)\n\n\nWarning: package 'anomalize' was built under R version 4.3.3\n\n\nCode\nlibrary(mvoutlier)\n\n\nWarning: package 'mvoutlier' was built under R version 4.3.3\n\n\nLoading required package: sgeostat\n\n\nCode\n#predata analysis.\n\n\n\n\n# 1. Exploratory Data Analysis for each feature variable\n\n\n# Drug\nggplot(data_imputed, aes(x = Drug)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Drug\", y = \"Count\", title = \"Distribution of Drug\")\n\n\n\n\n\nCode\n# Age\nggplot(data_imputed, aes(x = Age)) +\n  geom_histogram(binwidth = 1000, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Age\", y = \"Frequency\", title = \"Distribution of Age\")\n\n\n\n\n\nCode\n# Sex\nggplot(data_imputed, aes(x = Sex)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Sex\", y = \"Count\", title = \"Distribution of Sex\")\n\n\n\n\n\nCode\n# Ascites\nggplot(data_imputed, aes(x = Ascites)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Ascites\", y = \"Count\", title = \"Distribution of Ascites\")\n\n\n\n\n\nCode\n# Hepatomegaly\nggplot(data_imputed, aes(x = Hepatomegaly)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Hepatomegaly\", y = \"Count\", title = \"Distribution of Hepatomegaly\")\n\n\n\n\n\nCode\n# Spiders\nggplot(data_imputed, aes(x = Spiders)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Spiders\", y = \"Count\", title = \"Distribution of Spiders\")\n\n\n\n\n\nCode\n# Edema\nggplot(data_imputed, aes(x = Edema)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Edema\", y = \"Count\", title = \"Distribution of Edema\")\n\n\n\n\n\nCode\n# Bilirubin\nggplot(data_imputed, aes(x = Bilirubin)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Bilirubin\", y = \"Frequency\", title = \"Distribution of Bilirubin\")\n\n\n\n\n\nCode\n# Cholesterol\nggplot(data_imputed, aes(x = Cholesterol)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Cholesterol\", y = \"Frequency\", title = \"Distribution of Cholesterol\")\n\n\n\n\n\nCode\n# Albumin\nggplot(data_imputed, aes(x = Albumin)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Albumin\", y = \"Frequency\", title = \"Distribution of Albumin\")\n\n\n\n\n\nCode\n# Copper\nggplot(data_imputed, aes(x = Copper)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Copper\", y = \"Frequency\", title = \"Distribution of Copper\")\n\n\n\n\n\nCode\n# Alk_Phos\nggplot(data_imputed, aes(x = Alk_Phos)) +\n  geom_histogram(binwidth = 500, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Alkaline Phosphatase\", y = \"Frequency\", title = \"Distribution of Alkaline Phosphatase\")\n\n\n\n\n\nCode\n# SGOT\nggplot(data_imputed, aes(x = SGOT)) +\n  geom_histogram(binwidth = 10, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"SGOT\", y = \"Frequency\", title = \"Distribution of SGOT\")\n\n\n\n\n\nCode\n# Triglycerides\nggplot(data_imputed, aes(x = Tryglicerides)) +\n  geom_histogram(binwidth = 10, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Triglycerides\", y = \"Frequency\", title = \"Distribution of Triglycerides\")\n\n\n\n\n\nCode\n# Platelets\nggplot(data_imputed, aes(x = Platelets)) +\n  geom_histogram(binwidth = 50, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Platelets\", y = \"Frequency\", title = \"Distribution of Platelets\")\n\n\n\n\n\nCode\n# Prothrombin\nggplot(data_imputed, aes(x = Prothrombin)) +\n  geom_histogram(binwidth = 0.5, fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Prothrombin\", y = \"Frequency\", title = \"Distribution of Prothrombin\")\n\n\n\n\n\nCode\n# Stage\nggplot(data_imputed, aes(x = Stage)) +\n  geom_bar(fill = \"skyblue\", color = \"black\") +\n  labs(x = \"Stage\", y = \"Count\", title = \"Distribution of Stage\")\n\n\n\n\n\nCode\n#This is to find which disease is more affecting the status target variable.\n\n\n# Create contingency tables for each disease-related feature and Status\ntable_ascites &lt;- table(data_imputed$Ascites, data_imputed$Status)\ntable_hepatomegaly &lt;- table(data_imputed$Hepatomegaly, data_imputed$Status)\ntable_spiders &lt;- table(data_imputed$Spiders, data_imputed$Status)\ntable_edema &lt;- table(data_imputed$Edema, data_imputed$Status)\n\n# Create contingency table for Status and each disease-related feature\ntable_status_ascites &lt;- table(data_imputed$Status, data_imputed$Ascites)\ntable_status_hepatomegaly &lt;- table(data_imputed$Status, data_imputed$Hepatomegaly)\ntable_status_spiders &lt;- table(data_imputed$Status, data_imputed$Spiders)\ntable_status_edema &lt;- table(data_imputed$Status, data_imputed$Edema)\n\n# Visualize the relationship using stacked bar charts\npar(mfrow = c(2, 2))  # Set up a 2x2 layout for plots\nbarplot(table_ascites, beside = TRUE, legend = TRUE, main = \"Ascites vs. Status\")\nbarplot(table_hepatomegaly, beside = TRUE, legend = TRUE, main = \"Hepatomegaly vs. Status\")\nbarplot(table_spiders, beside = TRUE, legend = TRUE, main = \"Spiders vs. Status\")\nbarplot(table_edema, beside = TRUE, legend = TRUE, main = \"Edema vs. Status\")\n\n\n\n\n\nCode\n# Conduct chi-square tests for independence\nchi_sq_ascites &lt;- chisq.test(table_ascites)\n\n\nWarning in chisq.test(table_ascites): Chi-squared approximation may be\nincorrect\n\n\nCode\nchi_sq_hepatomegaly &lt;- chisq.test(table_hepatomegaly)\nchi_sq_spiders &lt;- chisq.test(table_spiders)\nchi_sq_edema &lt;- chisq.test(table_edema)\n\n\nWarning in chisq.test(table_edema): Chi-squared approximation may be incorrect\n\n\nCode\n# Conduct chi-square tests for independence with Status and each disease-related feature\nchi_sq_status_ascites &lt;- chisq.test(table_status_ascites)\n\n\nWarning in chisq.test(table_status_ascites): Chi-squared approximation may be\nincorrect\n\n\nCode\nchi_sq_status_hepatomegaly &lt;- chisq.test(table_status_hepatomegaly)\nchi_sq_status_spiders &lt;- chisq.test(table_status_spiders)\nchi_sq_status_edema &lt;- chisq.test(table_status_edema)\n\n\nWarning in chisq.test(table_status_edema): Chi-squared approximation may be\nincorrect\n\n\nCode\n# Print the results of chi-square tests\nprint(\"Chi-square test results for Ascites vs. Status:\")\n\n\n[1] \"Chi-square test results for Ascites vs. Status:\"\n\n\nCode\nprint(chi_sq_ascites)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_ascites\nX-squared = 25.237, df = 2, p-value = 3.31e-06\n\n\nCode\nprint(\"Chi-square test results for Hepatomegaly vs. Status:\")\n\n\n[1] \"Chi-square test results for Hepatomegaly vs. Status:\"\n\n\nCode\nprint(chi_sq_hepatomegaly)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_hepatomegaly\nX-squared = 24.805, df = 2, p-value = 4.109e-06\n\n\nCode\nprint(\"Chi-square test results for Spiders vs. Status:\")\n\n\n[1] \"Chi-square test results for Spiders vs. Status:\"\n\n\nCode\nprint(chi_sq_spiders)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_spiders\nX-squared = 14.5, df = 2, p-value = 0.0007102\n\n\nCode\nprint(\"Chi-square test results for Edema vs. Status:\")\n\n\n[1] \"Chi-square test results for Edema vs. Status:\"\n\n\nCode\nprint(chi_sq_edema)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_edema\nX-squared = 31.267, df = 4, p-value = 2.7e-06\n\n\nCode\n# Print the results of chi-square tests for Status and each disease-related feature\nprint(\"Chi-square test results for Status vs. Ascites:\")\n\n\n[1] \"Chi-square test results for Status vs. Ascites:\"\n\n\nCode\nprint(chi_sq_status_ascites)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_status_ascites\nX-squared = 25.237, df = 2, p-value = 3.31e-06\n\n\nCode\nprint(\"Chi-square test results for Status vs. Hepatomegaly:\")\n\n\n[1] \"Chi-square test results for Status vs. Hepatomegaly:\"\n\n\nCode\nprint(chi_sq_status_hepatomegaly)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_status_hepatomegaly\nX-squared = 24.805, df = 2, p-value = 4.109e-06\n\n\nCode\nprint(\"Chi-square test results for Status vs. Spiders:\")\n\n\n[1] \"Chi-square test results for Status vs. Spiders:\"\n\n\nCode\nprint(chi_sq_status_spiders)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_status_spiders\nX-squared = 14.5, df = 2, p-value = 0.0007102\n\n\nCode\nprint(\"Chi-square test results for Status vs. Edema:\")\n\n\n[1] \"Chi-square test results for Status vs. Edema:\"\n\n\nCode\nprint(chi_sq_status_edema)\n\n\n\n    Pearson's Chi-squared test\n\ndata:  table_status_edema\nX-squared = 31.267, df = 4, p-value = 2.7e-06\n\n\nCode\n#Overall, Ascites, Hepatomegaly, and Edema seem to have a significant impact on the disease outcome,\n#based on their lower p-values compared to Spiders.\n#Among these, Ascites and Hepatomegaly might have slightly stronger associations with the disease outcome, given their lower p-values.\n\n# Define thresholds for abnormal values based on general reference ranges\nthresholds &lt;- list(\n  Bilirubin = c(0.3, 1.2),              # Normal total bilirubin levels (mg/dL)\n  Cholesterol = c(0, 200),               # Normal total cholesterol levels (mg/dL)\n  Albumin = c(3.5, 5.0),                 # Normal serum albumin levels (g/dL)\n  Copper = c(70, 140),                   # Normal serum copper levels (µg/dL)\n  Alk_Phos = c(44, 147),                 # Normal alkaline phosphatase levels (IU/L)\n  SGOT = c(0, 40),                       # Normal serum glutamic-oxaloacetic transaminase levels (IU/L)\n  Tryglicerides = c(0, 150),             # Normal triglyceride levels (mg/dL)\n  Platelets = c(150, 450),         # Normal platelet counts (per microliter of blood)\n  Prothrombin = c(11, 13.5)              # Normal prothrombin time (seconds)\n)\n\n# Select the relevant lab value columns\nlab_columns &lt;- cirrhosis_data %&gt;%\n  select(Bilirubin, Cholesterol, Albumin, Copper, Alk_Phos, SGOT, Tryglicerides, Platelets, Prothrombin)\n\n# Ensure numeric lab values\nlab_columns &lt;- lab_columns %&gt;% mutate_all(as.numeric)\n\n# Identify rows without missing values\ncomplete_cases &lt;- complete.cases(lab_columns)\n\n# Filter both the original and lab data based on complete rows\nlab_values &lt;- lab_columns[complete_cases, ]\ncirrhosis_data_clean &lt;- cirrhosis_data[complete_cases, ]\n\n# Apply k-means clustering\nset.seed(123)\nkmeans_clusters &lt;- kmeans(scale(lab_values), centers = 3)  # Adjust the number of clusters as needed\ncirrhosis_data_clean$Cluster &lt;- as.factor(kmeans_clusters$cluster)\n\n# Function to classify values based on thresholds\nclassify_abnormal &lt;- function(value, range) {\n  if (is.na(value)) {\n    return(NA)\n  } else if (value &lt; range[1] || value &gt; range[2]) {\n    return(\"Abnormal\")\n  } else {\n    return(\"Normal\")\n  }\n}\n\n# Apply the function to classify each lab value based on the thresholds\nfor (param in names(thresholds)) {\n  cirrhosis_data_clean[[paste0(param, \"_Class\")]] &lt;- mapply(classify_abnormal, cirrhosis_data_clean[[param]], MoreArgs = list(range = thresholds[[param]]))\n}\n\n# Calculate the proportion of abnormal lab values per cluster\nabnormal_props &lt;- cirrhosis_data_clean %&gt;%\n  group_by(Cluster) %&gt;%\n  summarize(across(ends_with(\"_Class\"), ~ mean(. == \"Abnormal\", na.rm = TRUE)))\n\nprint(abnormal_props)\n\n\n# A tibble: 3 × 10\n  Cluster Bilirubin_Class Cholesterol_Class Albumin_Class Copper_Class\n  &lt;fct&gt;             &lt;dbl&gt;             &lt;dbl&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n1 1                 0.978             0.911         0.756        0.733\n2 2                 0.496             0.866         0.433        0.756\n3 3                 0.452             1             0.298        0.606\n# ℹ 5 more variables: Alk_Phos_Class &lt;dbl&gt;, SGOT_Class &lt;dbl&gt;,\n#   Tryglicerides_Class &lt;dbl&gt;, Platelets_Class &lt;dbl&gt;, Prothrombin_Class &lt;dbl&gt;\n\n\nCode\n# Survival Analysis\nlibrary(survival)\n\n# Create the survival object\nsurv_obj &lt;- Surv(time = cirrhosis_data_clean$N_Days, event = ifelse(cirrhosis_data_clean$Status == \"D\", 1, 0))\n\n# Fit the survival model by clusters\nfit &lt;- survfit(surv_obj ~ Cluster, data = cirrhosis_data_clean)\n\n# Plot Kaplan-Meier survival curves\nplot(fit, col = 1:3, lty = 1:3, xlab = \"Time (days)\", ylab = \"Survival Probability\")\nlegend(\"topright\", legend = levels(cirrhosis_data_clean$Cluster), col = 1:3, lty = 1:3)\n\n# Log-rank test to compare survival curves\nlog_rank_test &lt;- survdiff(surv_obj ~ Cluster, data = cirrhosis_data_clean)\np_value &lt;- 1 - pchisq(log_rank_test$chisq, length(log_rank_test$n) - 1)\ntitle(sub = paste(\"Log-rank p-value:\", round(p_value, 4)))\n\n# Calculate the midpoint of the threshold range for each variable\nthreshold_midpoints &lt;- sapply(thresholds, function(x) mean(x))\n\n# Calculate the distance of each observation's value from the midpoint of the threshold range for each variable\ndistances &lt;- sapply(names(thresholds), function(var) abs(cirrhosis_data_clean[[var]] - threshold_midpoints[var]))\n\n# Summarize the distance across all threshold variables for each observation\ntotal_distance &lt;- rowSums(distances)\n\n# Define a threshold for defining \"heavily abnormal\" observations\nthreshold_distance &lt;- 3  # Example threshold (can be adjusted based on your requirements)\n\n# Determine which variables are heavily abnormal for each observation\nheavily_abnormal_vars &lt;- apply(distances, 1, function(x) names(thresholds)[x &gt; threshold_distance])\n\n# Create a new column indicating observations where the summarized distance exceeds the defined threshold\ncirrhosis_data_clean$Heavily_Abnormal &lt;- ifelse(total_distance &gt; threshold_distance, paste0(\"(\", paste(heavily_abnormal_vars, collapse = \", \"), \")\"), \"\")\n\n# Print the first few rows of the updated dataset\nhead(data_imputed)\n\n\n  ID N_Days Status            Drug   Age Sex Ascites Hepatomegaly Spiders Edema\n1  1    400      D D-penicillamine 21464   F       Y            Y       Y     Y\n2  2   4500      C D-penicillamine 20617   F       N            Y       Y     N\n3  3   1012      D D-penicillamine 25594   M       N            N       N     S\n4  4   1925      D D-penicillamine 19994   F       N            Y       Y     S\n5  5   1504     CL         Placebo 13918   F       N            Y       Y     N\n7  7   1832      C         Placebo 20284   F       N            Y       N     N\n  Bilirubin Cholesterol Albumin Copper Alk_Phos   SGOT Tryglicerides Platelets\n1      14.5         261    2.60    156   1718.0 137.95           172       190\n2       1.1         302    4.14     54   7394.8 113.52            88       221\n3       1.4         176    3.48    210    516.0  96.10            55       151\n4       1.8         244    2.54     64   6121.8  60.63            92       183\n5       3.4         279    3.53    143    671.0 113.15            72       136\n7       1.0         322    4.09     52    824.0  60.45           213       204\n  Prothrombin Stage\n1        12.2     4\n2        10.6     3\n3        12.0     4\n4        10.3     4\n5        10.9     3\n7         9.7     3\n\n\nCode\n#now we will decide the feature variables whether they are normal or abnormal with help of statistical analysis \n#visualization and references.\n\n# Calculate summary statistics\nsummary_stats &lt;- summary(data_imputed[, c(\"Bilirubin\", \"Cholesterol\", \"Albumin\", \"Copper\", \"Alk_Phos\", \"SGOT\", \"Tryglicerides\", \"Platelets\", \"Prothrombin\")])\nprint(summary_stats)\n\n\n   Bilirubin       Cholesterol        Albumin          Copper      \n Min.   : 0.300   Min.   : 120.0   Min.   :1.960   Min.   :  4.00  \n 1st Qu.: 0.800   1st Qu.: 249.5   1st Qu.:3.310   1st Qu.: 42.75  \n Median : 1.400   Median : 310.0   Median :3.545   Median : 74.00  \n Mean   : 3.334   Mean   : 371.3   Mean   :3.517   Mean   :100.77  \n 3rd Qu.: 3.525   3rd Qu.: 401.0   3rd Qu.:3.772   3rd Qu.:129.25  \n Max.   :28.000   Max.   :1775.0   Max.   :4.400   Max.   :588.00  \n    Alk_Phos            SGOT        Tryglicerides     Platelets    \n Min.   :  289.0   Min.   : 28.38   Min.   : 33.0   Min.   : 62.0  \n 1st Qu.:  922.5   1st Qu.: 82.46   1st Qu.: 85.0   1st Qu.:200.0  \n Median : 1277.5   Median :116.62   Median :108.0   Median :257.0  \n Mean   : 1996.6   Mean   :124.12   Mean   :125.0   Mean   :261.8  \n 3rd Qu.: 2068.2   3rd Qu.:153.45   3rd Qu.:151.2   3rd Qu.:318.2  \n Max.   :13862.4   Max.   :457.25   Max.   :598.0   Max.   :563.0  \n  Prothrombin   \n Min.   : 9.00  \n 1st Qu.:10.00  \n Median :10.60  \n Mean   :10.74  \n 3rd Qu.:11.20  \n Max.   :17.10  \n\n\nCode\n#measures such as mean, median, standard deviation, minimum, and maximum. This will give you an overview of the distribution of values and help identify potential outliers.\n\n\n# Visualize the distribution using boxplots\nboxplot(data[, c(\"Bilirubin\", \"Cholesterol\", \"Albumin\", \"Copper\", \"Alk_Phos\", \"SGOT\", \"Tryglicerides\", \"Platelets\", \"Prothrombin\")])\n\n#Look for any extreme values or unusual patterns in the data that may indicate abnormality.\n\n#Clinical Guidelines:\n#we'll need to consult clinical guidelines or literature for reference ranges. For example, for bilirubin, you might consider a range of 0.2-1.2 mg/dL as normal.\n#Expert Opinion:\n#Seek input from medical professionals or domain experts who can provide guidance on what values are considered abnormal in the context of liver cirrhosis.\n\n\n#research questions \n\n\n#1)Is there a significant interaction effect between drug treatment (D-penicillamine vs placebo) and ascites status (present vs absent) on survival time?\n\nlibrary(survival)\nlibrary(car)\n\n\nWarning: package 'car' was built under R version 4.3.3\n\n\nLoading required package: carData\n\n\nWarning: package 'carData' was built under R version 4.3.3\n\n\n\nAttaching package: 'car'\n\n\nThe following object is masked from 'package:dplyr':\n\n    recode\n\n\nCode\nlibrary(ggplot2)\nlibrary(survminer)\n\n\nWarning: package 'survminer' was built under R version 4.3.3\n\n\nLoading required package: ggpubr\n\n\nWarning: package 'ggpubr' was built under R version 4.3.3\n\n\n\nAttaching package: 'survminer'\n\n\nThe following object is masked from 'package:survival':\n\n    myeloma\n\n\nCode\n# Convert 'Status' to a binary indicator\ndata_imputed$Event &lt;- ifelse(data_imputed$Status == \"D\", 1, 0)\n\n# Create survival object\nsurv_obj &lt;- Surv(time = data_imputed$N_Days, event = data_imputed$Event)\n\n# Fit a Cox proportional hazards model with the new survival object\ncoxph_model &lt;- coxph(surv_obj ~ Drug * Ascites, data = data_imputed)\n\ncoef(coxph_model)\n\n\n         DrugPlacebo             AscitesY DrugPlacebo:AscitesY \n          -0.1030267            2.1423633            0.3507101 \n\n\nCode\n# Test the interaction effect\nAnova(coxph_model, type = \"III\")\n\n\nAnalysis of Deviance Table (Type III tests)\n             LR Chisq Df Pr(&gt;Chisq)    \nDrug           0.2462  1     0.6198    \nAscites       23.0446  1  1.583e-06 ***\nDrug:Ascites   0.4391  1     0.5075    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nCode\n# Create a factor variable for the combination of Drug and Ascites\ndata_imputed$Drug_Ascites &lt;- with(data_imputed, interaction(Drug, Ascites))\n\n# Plot Kaplan-Meier survival curves\nggsurvplot(\n  survfit(surv_obj ~ Drug_Ascites, data = data_imputed),\n  data = data_imputed,\n  risk.table = TRUE,\n  pval = TRUE,\n  conf.int = TRUE,\n  xlab = \"Time (days)\",\n  ggtheme = theme_bw()\n)\n\n#Drug: The likelihood ratio (LR) chi-square statistic is 0.0738 with 1 degree of freedom, resulting in a p-value of 0.7859. This indicates that the effect of the 'Drug' variable alone is not statistically significant.\n#Ascites: The LR chi-square statistic is 10.8940 with 1 degree of freedom, yielding a highly significant p-value of 0.0009647. This suggests that the presence of ascites significantly affects survival outcomes.\n#Drug:Ascites Interaction: The LR chi-square statistic is 0.0923 with 1 degree of freedom, leading to a p-value of 0.7613. This implies that there is no statistically significant interaction effect between 'Drug' and 'Ascites' on survival outcomes.\n#These results indicate that while ascites is a significant predictor of survival outcomes, neither the 'Drug' variable nor its interaction with ascites significantly affects survival outcomes in this analysis.\n\n\n#2)Do the distributions of lab values (bilirubin, albumin, etc.) differ significantly between patients with and without edema?\n\nlibrary(dplyr)\nlibrary(ggpubr)\n\n# Group patients by edema status\ncirrhosis_edema &lt;- data_imputed %&gt;% \n  mutate(Edema_Status = ifelse(Edema %in% c(\"Y\", \"S\"), \"Edema\", \"No Edema\"))\n\n# Perform one-way ANOVA or Kruskal-Wallis tests for each lab value\nggboxplot(cirrhosis_edema, x=\"Edema_Status\", y=\"Bilirubin\") + \n  stat_compare_means(method=\"anova\")\n\n\nkruskal.test(Albumin ~ Edema_Status, data=cirrhosis_edema)\n\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  Albumin by Edema_Status\nKruskal-Wallis chi-squared = 24.13, df = 1, p-value = 9.005e-07\n\n\nCode\n#3)Do the relationships between lab values (e.g. bilirubin vs albumin) differ significantly between treatment groups?\n\n# Load required libraries\nlibrary(randomForest)\n\n\nWarning: package 'randomForest' was built under R version 4.3.3\n\n\nrandomForest 4.7-1.1\n\n\nType rfNews() to see new features/changes/bug fixes.\n\n\n\nAttaching package: 'randomForest'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nCode\nlibrary(caret)\n\n# Define your dataset and target variable\nX &lt;- cirrhosis_data[, c(\"Bilirubin\", \"Albumin\")]\ny &lt;- as.factor(cirrhosis_data$Drug)  # Convert Treatment to a factor for classification\n\n# Split data into training and testing sets\nset.seed(123)\ntrain_index &lt;- createDataPartition(y, p = 0.8, list = FALSE)\nX_train &lt;- X[train_index, ]\ny_train &lt;- y[train_index]\nX_test &lt;- X[-train_index, ]\ny_test &lt;- y[-train_index]\n\n# Train separate Random Forest models for each treatment group\n# Train separate Random Forest models for each treatment group\ntreatment_levels &lt;- levels(y)\nrf_models &lt;- list()\nfor (treatment_level in treatment_levels) {\n  y_train_treatment &lt;- ifelse(y_train == treatment_level, 1, 0)  # Convert treatment level to binary indicator\n  rf_models[[treatment_level]] &lt;- randomForest(x = X_train, y = y_train_treatment, ntree = 100)\n}\n\n\nWarning in randomForest.default(x = X_train, y = y_train_treatment, ntree =\n100): The response has five or fewer unique values.  Are you sure you want to\ndo regression?\n\n\nWarning in randomForest.default(x = X_train, y = y_train_treatment, ntree =\n100): The response has five or fewer unique values.  Are you sure you want to\ndo regression?\n\n\nCode\nfeature_importance &lt;- lapply(rf_models, importance)\n\n# Print feature importance for each treatment group\nfor (treatment_level in treatment_levels) {\n  cat(\"Treatment Group:\", treatment_level, \"\\n\")\n  print(feature_importance[[treatment_level]])\n  cat(\"\\n\")\n}\n\n\nTreatment Group: D-penicillamine \n          IncNodePurity\nBilirubin      18.87986\nAlbumin        22.87848\n\nTreatment Group: Placebo \n          IncNodePurity\nBilirubin      18.68447\nAlbumin        22.79035"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cirrhosis Patient",
    "section": "",
    "text": "The liver disease observations in the dataset under consideration include a wide range of demographic, clinical, and treatment-related factors. Each entry is assigned a unique ID, and further details such as the type of medication used, the disease’s state, and the number of days since the study’s start are also recorded. Clinical signs such as the presence of edema, hepatomegaly, ascites, and spider angiomas are documented together with demographic details like age and sex. The physiological state of patients is also revealed by biochemical markers such as alkaline phosphatase, albumin, copper, cholesterol, and bilirubin levels. Furthermore, vital indicators such as serum triglyceride, prothrombin time, platelet counts, and glutamic-oxaloacetic transaminase (SGOT) levels provide greater insights into liver function and related complications.\nThe dataset offers a wealth of opportunities for thorough studies targeted at comprehending the dynamics of liver disease and the effectiveness of treatment. Researchers can investigate a wide range of topics thanks to its abundance of data on patient characteristics, disease development, and biochemical profiles. These can include figuring out what predicts the course of an illness, evaluating how various therapies affect a patient’s health, and finding links between particular clinical signs and the severity of the condition. These analyses have the potential to advance our knowledge of the mechanisms underlying liver disease, direct therapeutic approaches, and ultimately increase patient outcomes and care in this vital area of medicine.\nThe dataset is chosen for study because of its applicability to clinical settings or liver-related medical studies. Globally, liver diseases are major health concerns. Therefore, information on patient demographics, medical history, and treatment outcomes is extremely helpful in determining the course of the disease and determining the best course of treatment. This dataset, which includes comprehensive data on patient characteristics, medication schedules, and medical measurements, provides insights into the efficacy of various treatments and their effect on patient outcomes. This can help guide clinical decision-making and possibly guide future directions in hepatology research."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Cirrhosis Patient",
    "section": "",
    "text": "The liver disease observations in the dataset under consideration include a wide range of demographic, clinical, and treatment-related factors. Each entry is assigned a unique ID, and further details such as the type of medication used, the disease’s state, and the number of days since the study’s start are also recorded. Clinical signs such as the presence of edema, hepatomegaly, ascites, and spider angiomas are documented together with demographic details like age and sex. The physiological state of patients is also revealed by biochemical markers such as alkaline phosphatase, albumin, copper, cholesterol, and bilirubin levels. Furthermore, vital indicators such as serum triglyceride, prothrombin time, platelet counts, and glutamic-oxaloacetic transaminase (SGOT) levels provide greater insights into liver function and related complications.\nThe dataset offers a wealth of opportunities for thorough studies targeted at comprehending the dynamics of liver disease and the effectiveness of treatment. Researchers can investigate a wide range of topics thanks to its abundance of data on patient characteristics, disease development, and biochemical profiles. These can include figuring out what predicts the course of an illness, evaluating how various therapies affect a patient’s health, and finding links between particular clinical signs and the severity of the condition. These analyses have the potential to advance our knowledge of the mechanisms underlying liver disease, direct therapeutic approaches, and ultimately increase patient outcomes and care in this vital area of medicine.\nThe dataset is chosen for study because of its applicability to clinical settings or liver-related medical studies. Globally, liver diseases are major health concerns. Therefore, information on patient demographics, medical history, and treatment outcomes is extremely helpful in determining the course of the disease and determining the best course of treatment. This dataset, which includes comprehensive data on patient characteristics, medication schedules, and medical measurements, provides insights into the efficacy of various treatments and their effect on patient outcomes. This can help guide clinical decision-making and possibly guide future directions in hepatology research."
  }
]