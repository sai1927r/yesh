---
title: "code"
---

```{r}
data = read.csv("C:/Users/HP/Downloads/cirrhosis+patient+survival+prediction+dataset-1/cirrhosis.csv")
head(data)
str(data)

missing_values <- colSums(is.na(data))
print(missing_values)

# If there are missing values, impute them using mean imputation
data_imputed <- na.omit(data)

head(data_imputed)

cirrhosis_data <- na.omit(data_imputed)
head(cirrhosis_data)
# Load necessary libraries
library(dplyr)  # For data manipulation
library(ggplot2)  # For data visualization
library(caret)  # For machine learning model fitting
library(survival) # For survival analysis
library(anomalize)
library(mvoutlier)



#predata analysis.




# 1. Exploratory Data Analysis for each feature variable


# Drug
ggplot(data_imputed, aes(x = Drug)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(x = "Drug", y = "Count", title = "Distribution of Drug")

# Age
ggplot(data_imputed, aes(x = Age)) +
  geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
  labs(x = "Age", y = "Frequency", title = "Distribution of Age")

# Sex
ggplot(data_imputed, aes(x = Sex)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(x = "Sex", y = "Count", title = "Distribution of Sex")

# Ascites
ggplot(data_imputed, aes(x = Ascites)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(x = "Ascites", y = "Count", title = "Distribution of Ascites")

# Hepatomegaly
ggplot(data_imputed, aes(x = Hepatomegaly)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(x = "Hepatomegaly", y = "Count", title = "Distribution of Hepatomegaly")

# Spiders
ggplot(data_imputed, aes(x = Spiders)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(x = "Spiders", y = "Count", title = "Distribution of Spiders")

# Edema
ggplot(data_imputed, aes(x = Edema)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(x = "Edema", y = "Count", title = "Distribution of Edema")

# Bilirubin
ggplot(data_imputed, aes(x = Bilirubin)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(x = "Bilirubin", y = "Frequency", title = "Distribution of Bilirubin")

# Cholesterol
ggplot(data_imputed, aes(x = Cholesterol)) +
  geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
  labs(x = "Cholesterol", y = "Frequency", title = "Distribution of Cholesterol")

# Albumin
ggplot(data_imputed, aes(x = Albumin)) +
  geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
  labs(x = "Albumin", y = "Frequency", title = "Distribution of Albumin")

# Copper
ggplot(data_imputed, aes(x = Copper)) +
  geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
  labs(x = "Copper", y = "Frequency", title = "Distribution of Copper")

# Alk_Phos
ggplot(data_imputed, aes(x = Alk_Phos)) +
  geom_histogram(binwidth = 500, fill = "skyblue", color = "black") +
  labs(x = "Alkaline Phosphatase", y = "Frequency", title = "Distribution of Alkaline Phosphatase")

# SGOT
ggplot(data_imputed, aes(x = SGOT)) +
  geom_histogram(binwidth = 10, fill = "skyblue", color = "black") +
  labs(x = "SGOT", y = "Frequency", title = "Distribution of SGOT")

# Triglycerides
ggplot(data_imputed, aes(x = Tryglicerides)) +
  geom_histogram(binwidth = 10, fill = "skyblue", color = "black") +
  labs(x = "Triglycerides", y = "Frequency", title = "Distribution of Triglycerides")

# Platelets
ggplot(data_imputed, aes(x = Platelets)) +
  geom_histogram(binwidth = 50, fill = "skyblue", color = "black") +
  labs(x = "Platelets", y = "Frequency", title = "Distribution of Platelets")

# Prothrombin
ggplot(data_imputed, aes(x = Prothrombin)) +
  geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
  labs(x = "Prothrombin", y = "Frequency", title = "Distribution of Prothrombin")

# Stage
ggplot(data_imputed, aes(x = Stage)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(x = "Stage", y = "Count", title = "Distribution of Stage")


#This is to find which disease is more affecting the status target variable.


# Create contingency tables for each disease-related feature and Status
table_ascites <- table(data_imputed$Ascites, data_imputed$Status)
table_hepatomegaly <- table(data_imputed$Hepatomegaly, data_imputed$Status)
table_spiders <- table(data_imputed$Spiders, data_imputed$Status)
table_edema <- table(data_imputed$Edema, data_imputed$Status)

# Create contingency table for Status and each disease-related feature
table_status_ascites <- table(data_imputed$Status, data_imputed$Ascites)
table_status_hepatomegaly <- table(data_imputed$Status, data_imputed$Hepatomegaly)
table_status_spiders <- table(data_imputed$Status, data_imputed$Spiders)
table_status_edema <- table(data_imputed$Status, data_imputed$Edema)

# Visualize the relationship using stacked bar charts
par(mfrow = c(2, 2))  # Set up a 2x2 layout for plots
barplot(table_ascites, beside = TRUE, legend = TRUE, main = "Ascites vs. Status")
barplot(table_hepatomegaly, beside = TRUE, legend = TRUE, main = "Hepatomegaly vs. Status")
barplot(table_spiders, beside = TRUE, legend = TRUE, main = "Spiders vs. Status")
barplot(table_edema, beside = TRUE, legend = TRUE, main = "Edema vs. Status")

# Conduct chi-square tests for independence
chi_sq_ascites <- chisq.test(table_ascites)
chi_sq_hepatomegaly <- chisq.test(table_hepatomegaly)
chi_sq_spiders <- chisq.test(table_spiders)
chi_sq_edema <- chisq.test(table_edema)

# Conduct chi-square tests for independence with Status and each disease-related feature
chi_sq_status_ascites <- chisq.test(table_status_ascites)
chi_sq_status_hepatomegaly <- chisq.test(table_status_hepatomegaly)
chi_sq_status_spiders <- chisq.test(table_status_spiders)
chi_sq_status_edema <- chisq.test(table_status_edema)

# Print the results of chi-square tests
print("Chi-square test results for Ascites vs. Status:")
print(chi_sq_ascites)
print("Chi-square test results for Hepatomegaly vs. Status:")
print(chi_sq_hepatomegaly)
print("Chi-square test results for Spiders vs. Status:")
print(chi_sq_spiders)
print("Chi-square test results for Edema vs. Status:")
print(chi_sq_edema)

# Print the results of chi-square tests for Status and each disease-related feature
print("Chi-square test results for Status vs. Ascites:")
print(chi_sq_status_ascites)
print("Chi-square test results for Status vs. Hepatomegaly:")
print(chi_sq_status_hepatomegaly)
print("Chi-square test results for Status vs. Spiders:")
print(chi_sq_status_spiders)
print("Chi-square test results for Status vs. Edema:")
print(chi_sq_status_edema)


#Overall, Ascites, Hepatomegaly, and Edema seem to have a significant impact on the disease outcome,
#based on their lower p-values compared to Spiders.
#Among these, Ascites and Hepatomegaly might have slightly stronger associations with the disease outcome, given their lower p-values.

# Define thresholds for abnormal values based on general reference ranges
thresholds <- list(
  Bilirubin = c(0.3, 1.2),              # Normal total bilirubin levels (mg/dL)
  Cholesterol = c(0, 200),               # Normal total cholesterol levels (mg/dL)
  Albumin = c(3.5, 5.0),                 # Normal serum albumin levels (g/dL)
  Copper = c(70, 140),                   # Normal serum copper levels (Âµg/dL)
  Alk_Phos = c(44, 147),                 # Normal alkaline phosphatase levels (IU/L)
  SGOT = c(0, 40),                       # Normal serum glutamic-oxaloacetic transaminase levels (IU/L)
  Tryglicerides = c(0, 150),             # Normal triglyceride levels (mg/dL)
  Platelets = c(150, 450),         # Normal platelet counts (per microliter of blood)
  Prothrombin = c(11, 13.5)              # Normal prothrombin time (seconds)
)

# Select the relevant lab value columns
lab_columns <- cirrhosis_data %>%
  select(Bilirubin, Cholesterol, Albumin, Copper, Alk_Phos, SGOT, Tryglicerides, Platelets, Prothrombin)

# Ensure numeric lab values
lab_columns <- lab_columns %>% mutate_all(as.numeric)

# Identify rows without missing values
complete_cases <- complete.cases(lab_columns)

# Filter both the original and lab data based on complete rows
lab_values <- lab_columns[complete_cases, ]
cirrhosis_data_clean <- cirrhosis_data[complete_cases, ]

# Apply k-means clustering
set.seed(123)
kmeans_clusters <- kmeans(scale(lab_values), centers = 3)  # Adjust the number of clusters as needed
cirrhosis_data_clean$Cluster <- as.factor(kmeans_clusters$cluster)

# Function to classify values based on thresholds
classify_abnormal <- function(value, range) {
  if (is.na(value)) {
    return(NA)
  } else if (value < range[1] || value > range[2]) {
    return("Abnormal")
  } else {
    return("Normal")
  }
}

# Apply the function to classify each lab value based on the thresholds
for (param in names(thresholds)) {
  cirrhosis_data_clean[[paste0(param, "_Class")]] <- mapply(classify_abnormal, cirrhosis_data_clean[[param]], MoreArgs = list(range = thresholds[[param]]))
}

# Calculate the proportion of abnormal lab values per cluster
abnormal_props <- cirrhosis_data_clean %>%
  group_by(Cluster) %>%
  summarize(across(ends_with("_Class"), ~ mean(. == "Abnormal", na.rm = TRUE)))

print(abnormal_props)

# Survival Analysis
library(survival)

# Create the survival object
surv_obj <- Surv(time = cirrhosis_data_clean$N_Days, event = ifelse(cirrhosis_data_clean$Status == "D", 1, 0))

# Fit the survival model by clusters
fit <- survfit(surv_obj ~ Cluster, data = cirrhosis_data_clean)

# Plot Kaplan-Meier survival curves
plot(fit, col = 1:3, lty = 1:3, xlab = "Time (days)", ylab = "Survival Probability")
legend("topright", legend = levels(cirrhosis_data_clean$Cluster), col = 1:3, lty = 1:3)

# Log-rank test to compare survival curves
log_rank_test <- survdiff(surv_obj ~ Cluster, data = cirrhosis_data_clean)
p_value <- 1 - pchisq(log_rank_test$chisq, length(log_rank_test$n) - 1)
title(sub = paste("Log-rank p-value:", round(p_value, 4)))

# Calculate the midpoint of the threshold range for each variable
threshold_midpoints <- sapply(thresholds, function(x) mean(x))

# Calculate the distance of each observation's value from the midpoint of the threshold range for each variable
distances <- sapply(names(thresholds), function(var) abs(cirrhosis_data_clean[[var]] - threshold_midpoints[var]))

# Summarize the distance across all threshold variables for each observation
total_distance <- rowSums(distances)

# Define a threshold for defining "heavily abnormal" observations
threshold_distance <- 3  # Example threshold (can be adjusted based on your requirements)

# Determine which variables are heavily abnormal for each observation
heavily_abnormal_vars <- apply(distances, 1, function(x) names(thresholds)[x > threshold_distance])

# Create a new column indicating observations where the summarized distance exceeds the defined threshold
cirrhosis_data_clean$Heavily_Abnormal <- ifelse(total_distance > threshold_distance, paste0("(", paste(heavily_abnormal_vars, collapse = ", "), ")"), "")

# Print the first few rows of the updated dataset
head(data_imputed)

#now we will decide the feature variables whether they are normal or abnormal with help of statistical analysis 
#visualization and references.

# Calculate summary statistics
summary_stats <- summary(data_imputed[, c("Bilirubin", "Cholesterol", "Albumin", "Copper", "Alk_Phos", "SGOT", "Tryglicerides", "Platelets", "Prothrombin")])
print(summary_stats)

#measures such as mean, median, standard deviation, minimum, and maximum. This will give you an overview of the distribution of values and help identify potential outliers.


# Visualize the distribution using boxplots
boxplot(data[, c("Bilirubin", "Cholesterol", "Albumin", "Copper", "Alk_Phos", "SGOT", "Tryglicerides", "Platelets", "Prothrombin")])

#Look for any extreme values or unusual patterns in the data that may indicate abnormality.

#Clinical Guidelines:
#we'll need to consult clinical guidelines or literature for reference ranges. For example, for bilirubin, you might consider a range of 0.2-1.2 mg/dL as normal.
#Expert Opinion:
#Seek input from medical professionals or domain experts who can provide guidance on what values are considered abnormal in the context of liver cirrhosis.


#research questions 


#1)Is there a significant interaction effect between drug treatment (D-penicillamine vs placebo) and ascites status (present vs absent) on survival time?

library(survival)
library(car)
library(ggplot2)
library(survminer)
# Convert 'Status' to a binary indicator
data_imputed$Event <- ifelse(data_imputed$Status == "D", 1, 0)

# Create survival object
surv_obj <- Surv(time = data_imputed$N_Days, event = data_imputed$Event)

# Fit a Cox proportional hazards model with the new survival object
coxph_model <- coxph(surv_obj ~ Drug * Ascites, data = data_imputed)

coef(coxph_model)
# Test the interaction effect
Anova(coxph_model, type = "III")

# Create a factor variable for the combination of Drug and Ascites
data_imputed$Drug_Ascites <- with(data_imputed, interaction(Drug, Ascites))

# Plot Kaplan-Meier survival curves
ggsurvplot(
  survfit(surv_obj ~ Drug_Ascites, data = data_imputed),
  data = data_imputed,
  risk.table = TRUE,
  pval = TRUE,
  conf.int = TRUE,
  xlab = "Time (days)",
  ggtheme = theme_bw()
)

#Drug: The likelihood ratio (LR) chi-square statistic is 0.0738 with 1 degree of freedom, resulting in a p-value of 0.7859. This indicates that the effect of the 'Drug' variable alone is not statistically significant.
#Ascites: The LR chi-square statistic is 10.8940 with 1 degree of freedom, yielding a highly significant p-value of 0.0009647. This suggests that the presence of ascites significantly affects survival outcomes.
#Drug:Ascites Interaction: The LR chi-square statistic is 0.0923 with 1 degree of freedom, leading to a p-value of 0.7613. This implies that there is no statistically significant interaction effect between 'Drug' and 'Ascites' on survival outcomes.
#These results indicate that while ascites is a significant predictor of survival outcomes, neither the 'Drug' variable nor its interaction with ascites significantly affects survival outcomes in this analysis.


#2)Do the distributions of lab values (bilirubin, albumin, etc.) differ significantly between patients with and without edema?

library(dplyr)
library(ggpubr)

# Group patients by edema status
cirrhosis_edema <- data_imputed %>% 
  mutate(Edema_Status = ifelse(Edema %in% c("Y", "S"), "Edema", "No Edema"))

# Perform one-way ANOVA or Kruskal-Wallis tests for each lab value
ggboxplot(cirrhosis_edema, x="Edema_Status", y="Bilirubin") + 
  stat_compare_means(method="anova")


kruskal.test(Albumin ~ Edema_Status, data=cirrhosis_edema)

#3)Do the relationships between lab values (e.g. bilirubin vs albumin) differ significantly between treatment groups?

# Load required libraries
library(randomForest)
library(caret)

# Define your dataset and target variable
X <- cirrhosis_data[, c("Bilirubin", "Albumin")]
y <- as.factor(cirrhosis_data$Drug)  # Convert Treatment to a factor for classification

# Split data into training and testing sets
set.seed(123)
train_index <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[train_index, ]
y_train <- y[train_index]
X_test <- X[-train_index, ]
y_test <- y[-train_index]

# Train separate Random Forest models for each treatment group
# Train separate Random Forest models for each treatment group
treatment_levels <- levels(y)
rf_models <- list()
for (treatment_level in treatment_levels) {
  y_train_treatment <- ifelse(y_train == treatment_level, 1, 0)  # Convert treatment level to binary indicator
  rf_models[[treatment_level]] <- randomForest(x = X_train, y = y_train_treatment, ntree = 100)
}

feature_importance <- lapply(rf_models, importance)

# Print feature importance for each treatment group
for (treatment_level in treatment_levels) {
  cat("Treatment Group:", treatment_level, "\n")
  print(feature_importance[[treatment_level]])
  cat("\n")
}


```
